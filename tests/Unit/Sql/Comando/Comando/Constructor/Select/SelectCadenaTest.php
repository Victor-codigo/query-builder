<?php

declare(strict_types=1);

namespace Tests\Unit\Sql\Comando\Comando\Constructor\Select;

use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\OP;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use PHPUnit\Framework\TestCase;
use Phpunit\Util;

// ******************************************************************************

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class SelectCadenaTest extends TestCase
{
    use Util;
    // ******************************************************************************

    /**
     * @var SelectCadena
     */
    protected $object;

    /**
     * @var ComandoDmlMock
     */
    private $comando_mock;

    /**
     * @var ComandoDmlMock
     */
    private $helper;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoDmlMock();

        $conexion = $this->helper->getConexionMock();
        $clausula_mock = $this->helper->getClausulasFabrica();
        $fabrica_condiciones = $this->helper->getCondicionesFabricaMock();
        $this->comando_mock = $this->helper->getComandoDmlMock(
            $conexion,
            $clausula_mock,
            $fabrica_condiciones,
            [
                'from',
                'having',
                'groupBy',
                'limit',
                'fetchAllBoth',
                'fetchAllAssoc',
                'fetchAllClass',
                'fetchAllObject',
                'fetchAllColumn',
                'fetchFirst',
                'fetchLast',
                'fetchFind',
            ]
        );

        $this->object = new SelectCadena($this->comando_mock);
    }
    // ******************************************************************************

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    // ******************************************************************************

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: from ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::from
     *
     * @group from
     */
    public function testPartition()
    {
        $particiones = ['tabla1', 'tabla2', 'tabla3'];

        $this->comando_mock->expects($this->once())
                        ->method('from')
                        ->with($particiones);

        $resultado = $this->object->from($particiones);

        $this->assertInstanceOf(SelectCadena::class, $resultado,
            'ERROR: El valor devuelto no es una instancia de la clase SelectCadena');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: having ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::having
     *
     * @group having
     */
    public function testHaving()
    {
        $atributo = 'atributo';
        $operador = OP::EQUAL;
        $params = 3;

        $this->comando_mock->expects($this->once())
                        ->method('having')
                        ->with($atributo, $operador, $params);

        $resultado = $this->object->having($atributo, $operador, $params);

        $this->assertInstanceOf(SelectCadena::class, $resultado,
            'ERROR: El valor devuelto no es una instancia de la clase SelectCadena');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: groupBy ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::groupBy
     *
     * @group groupBy
     */
    public function testGroupBy()
    {
        $atributo = 'atributo';

        $this->comando_mock->expects($this->once())
                        ->method('groupBy')
                        ->with($atributo);

        $resultado = $this->object->groupBy($atributo);

        $this->assertInstanceOf(SelectCadena::class, $resultado,
            'ERROR: El valor devuelto no es una instancia de la clase SelectCadena');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: limit ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::limit
     *
     * @group limit
     */
    public function testLimit()
    {
        $atributo = 'atributo';

        $this->comando_mock->expects($this->once())
                        ->method('limit')
                        ->with($atributo);

        $resultado = $this->object->limit($atributo);

        $this->assertInstanceOf(SelectCadena::class, $resultado,
            'ERROR: El valor devuelto no es una instancia de la clase SelectCadena');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchAllBoth ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::fetchAllBoth
     *
     * @group fetchAllBoth
     */
    public function testFetchAllBoth()
    {
        $this->comando_mock
            ->expects($this->once())
            ->method('fetchAllBoth')
            ->willReturn('fetchAllBoth');

        $resultado = $this->object->fetchAllBoth();

        $this->assertEquals('fetchAllBoth', $resultado,
            'ERROR: El valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchAllAssoc ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::fetchAllAssoc
     *
     * @group fetchAllAssoc
     */
    public function testFetchAllAssoc()
    {
        $this->comando_mock
            ->expects($this->once())
            ->method('fetchAllAssoc')
            ->willReturn('fetchAllAssoc');

        $resultado = $this->object->fetchAllAssoc();

        $this->assertEquals('fetchAllAssoc', $resultado,
            'ERROR: El valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchAllClass ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::fetchAllClass
     *
     * @group fetchAllClass
     */
    public function testFetchAllClass()
    {
        $clase = 'clase';
        $params_constructor = [1, 2];

        $this->comando_mock
            ->expects($this->once())
            ->method('fetchAllClass')
            ->with($clase, $params_constructor)
            ->willReturn('fetchAllClass');

        $resultado = $this->object->fetchAllClass($clase, $params_constructor);

        $this->assertEquals('fetchAllClass', $resultado,
            'ERROR: El valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchAllObject ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::fetchAllObject
     *
     * @group fetchAllObject
     */
    public function testFetchAllObject()
    {
        $this->comando_mock
            ->expects($this->once())
            ->method('fetchAllObject')
            ->with(\PDO::FETCH_CLASS, \stdClass::class)
            ->willReturn('fetchAllObject');

        $resultado = $this->object->fetchAllObject();

        $this->assertEquals('fetchAllObject', $resultado,
            'ERROR: El valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchAllColumn ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::fetchAllColumn
     *
     * @group fetchAllColumn
     */
    public function testFetchAllColumn()
    {
        $column = 'columna';

        $this->comando_mock
            ->expects($this->once())
            ->method('fetchAllColumn')
            ->with($column)
            ->willReturn('fetchAllColumn');

        $resultado = $this->object->fetchAllColumn($column);

        $this->assertEquals('fetchAllColumn', $resultado,
            'ERROR: El valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchFirst ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::fetchFirst
     *
     * @group fetchFirst
     */
    public function testFetchFirst()
    {
        $field = 'campo';
        $value = 2;
        $modo = \PDO::FETCH_OBJ;

        $this->comando_mock
            ->expects($this->once())
            ->method('fetchFirst')
            ->with($field, $value, $modo)
            ->willReturn('fetchFirst');

        $resultado = $this->object->fetchFirst($field, $value, $modo);

        $this->assertEquals('fetchFirst', $resultado,
            'ERROR: El valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchLast ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::fetchLast
     *
     * @group fetchLast
     */
    public function testFetchLast()
    {
        $field = 'campo';
        $value = 2;
        $modo = \PDO::FETCH_OBJ;

        $this->comando_mock
            ->expects($this->once())
            ->method('fetchLast')
            ->with($field, $value, $modo)
            ->willReturn('fetchLast');

        $resultado = $this->object->fetchLast($field, $value, $modo);

        $this->assertEquals('fetchLast', $resultado,
            'ERROR: El valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchFind ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectCadena::fetchFind
     *
     * @group fetchFind
     */
    public function testFetchFind()
    {
        $field = 'campo';
        $value = 2;
        $modo = \PDO::FETCH_OBJ;

        $this->comando_mock
            ->expects($this->once())
            ->method('fetchFind')
            ->with($field, $value, $modo)
            ->willReturn('fetchFind');

        $resultado = $this->object->fetchFind($field, $value, $modo);

        $this->assertEquals('fetchFind', $resultado,
            'ERROR: El valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>
}
