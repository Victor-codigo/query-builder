<?php

declare(strict_types=1);

namespace Tests\Unit\Sql\Comando\Comando\Constructor\Delete;

use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use PHPUnit\Framework\TestCase;
use Phpunit\Util;

// ******************************************************************************

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class DeleteCadenaTest extends TestCase
{
    use Util;
    // ******************************************************************************

    /**
     * @var DeleteCadena
     */
    protected $object;

    /**
     * @var ComandoDmlMock
     */
    private $comando_mock;

    /**
     * @var ComandoDmlMock
     */
    private $helper;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoDmlMock();

        $conexion = $this->helper->getConexionMock();
        $clausula_mock = $this->helper->getClausulasFabrica();
        $fabrica_condiciones = $this->helper->getCondicionesFabricaMock();
        $this->comando_mock = $this->helper->getComandoDmlMock($conexion, $clausula_mock, $fabrica_condiciones, ['partition', 'limit']);

        $this->object = $this->getMockBuilder(DeleteCadena::class)
                                ->setConstructorArgs([$this->comando_mock, $fabrica_condiciones, false])
                                ->setMethods([])
                                ->getMockForAbstractClass();
    }
    // ******************************************************************************

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    // ******************************************************************************

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: partition ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Delete\DeleteCadena::partition
     *
     * @group partition
     */
    public function testPartition()
    {
        $particiones = ['particion1', 'particion2', 'particion3'];

        $this->comando_mock->expects($this->once())
                        ->method('partition')
                        ->with($particiones);

        $resultado = $this->object->partition($particiones);

        $this->assertInstanceOf(DeleteCadena::class, $resultado,
            'ERROR: El valor devuelto no es una instancia de la clase InsertCadena');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: limit ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Delete\DeleteCadena::limit
     *
     * @group limit
     */
    public function testLimit()
    {
        $numero = 3;

        $this->comando_mock->expects($this->once())
                        ->method('limit')
                        ->with($numero);

        $resultado = $this->object->limit($numero);

        $this->assertInstanceOf(DeleteCadena::class, $resultado,
            'ERROR: El valor devuelto no es una instancia de la clase InsertCadena');
    }
    // ******************************************************************************

    // </editor-fold>
}
