<?php

declare(strict_types=1);

namespace Tests\Unit\Sql\Comando\Comando\Constructor\Insert;

use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use PHPUnit\Framework\TestCase;
use Phpunit\Util;

// ******************************************************************************

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class InsertCadenaTest extends TestCase
{
    use Util;
    // ******************************************************************************

    /**
     * @var InsertCadena
     */
    protected $object;

    /**
     * @var ComandoDmlMock
     */
    private $comando_mock;

    /**
     * @var ComandoDmlMock
     */
    private $helper;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoDmlMock();

        $conexion = $this->helper->getConexionMock();
        $clausula_mock = $this->helper->getClausulasFabrica();
        $fabrica_condiciones = $this->helper->getCondicionesFabricaMock();
        $this->comando_mock = $this->helper->getComandoDmlMock($conexion, $clausula_mock, $fabrica_condiciones,
            ['partition', 'attributes', 'values', 'onDuplicate']);

        $this->object = new InsertCadena($this->comando_mock);
    }
    // ******************************************************************************

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    // ******************************************************************************

    // <editor-fold defaultstate="collapsed" desc=" Tests para la funci贸n: partition ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Insert\InsertCadena::partition
     *
     * @group partition
     */
    public function testPartition()
    {
        $particiones = ['particion1', 'particion2', 'particion3'];

        $this->comando_mock->expects($this->once())
                        ->method('partition')
                        ->with($particiones);

        $resultado = $this->object->partition($particiones);

        $this->assertInstanceOf(InsertCadena::class, $resultado,
            'ERROR: El valor devuelto no es una instancia de la clase InsertCadena');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la funci贸n: attributes ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Insert\InsertCadena::attributes
     *
     * @group attributes
     */
    public function testAttributes()
    {
        $atributos = ['atributo1', 'atributo2'];

        $this->comando_mock->expects($this->once())
                        ->method('attributes')
                        ->with($atributos);

        $resultado = $this->object->attributes($atributos);

        $this->assertInstanceOf(InsertCadena::class, $resultado,
            'ERROR: El valor devuelto no es una instancia de la clase InsertCadena');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la funci贸n: values ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Insert\InsertCadena::values
     *
     * @group values
     */
    public function testValues()
    {
        $atributos = ['atributo1', 'atributo2'];

        $this->comando_mock->expects($this->once())
                        ->method('values')
                        ->with($atributos);

        $resultado = $this->object->values($atributos);

        $this->assertInstanceOf(InsertCadena::class, $resultado,
            'ERROR: El valor devuelto no es una instancia de la clase InsertCadena');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la funci贸n: onDuplicate ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Insert\InsertCadena::onDuplicate
     *
     * @group onDuplicate
     */
    public function testOnDuplicate()
    {
        $atributos = ['atributo1', 'atributo2'];

        $this->comando_mock->expects($this->once())
                        ->method('onDuplicate')
                        ->with($atributos);

        $resultado = $this->object->onDuplicate($atributos);

        $this->assertInstanceOf(InsertCadena::class, $resultado,
            'ERROR: El valor devuelto no es una instancia de la clase InsertCadena');
    }
    // ******************************************************************************

    // </editor-fold>
}
