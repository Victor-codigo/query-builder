<?php

declare(strict_types=1);

namespace Tests\Unit\Sql\Comando\Comando;

use GT\Libs\Sistema\BD\Conexion\Conexion;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\AndOperador;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Condicion\CondicionFabricaInterface;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\GrupoOperadores;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\OP;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\TIPOS as OPERADOR_TIPOS;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\ClausulaFabricaInterface;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\FromClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\Join;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\JOIN_TIPOS;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\JoinParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Limit\LimitClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Limit\LimitParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\OrderBy\OrderByClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\OrderBy\OrderByParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Partition\PartitionClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Partition\PartitionParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Where\WhereClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use PHPUnit\Framework\TestCase;
use Phpunit\Util;

// ******************************************************************************

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class ComandoDmlTest extends TestCase
{
    use Util;
    // ******************************************************************************

    /**
     * @var ComandoDml
     */
    protected $object;

    /**
     * @var ComandoDmlMock
     */
    private $helper;

    /**
     * @var ClausulaFabricaInterface
     */
    private $clausula_fabrica;

    /**
     * @var Conexion
     */
    private $conexion;

    /**
     * @var CondicionFabricaInterface
     */
    private $fabrica_condiciones;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoDmlMock();

        $this->conexion = $this->helper->getConexionMock();
        $this->clausula_fabrica = $this->helper->getClausulasFabrica();
        $this->fabrica_condiciones = $this->helper->getCondicionesFabricaMock();

        $this->object = $this->getMockBuilder(ComandoDml::class)
                                ->setConstructorArgs([$this->conexion, $this->clausula_fabrica, $this->fabrica_condiciones])
                                ->getMockForAbstractClass();
    }
    // ******************************************************************************

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    // ******************************************************************************

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: join ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\ComandoDml::join
     *
     * @group join
     */
    public function testJoin()
    {
        $params = new JoinParams();
        $params->atributo_tabla1 = 'atributo1';
        $params->atributo_tabla2 = 'atributo2';
        $params->operador = OP::EQUAL;
        $params->tabla2 = 'tabla2';

        $clausula = $this->getMockBuilder(FromClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['joinCrear', 'joinAdd'])
                            ->getMockForAbstractClass();

        $join = $this->getMockBuilder(Join::class)
                        ->disableOriginalConstructor()
                        ->getMockForAbstractClass();

        $clausula->expects($this->once())
                    ->method('joinCrear')
                    ->with($this->clausula_fabrica, JOIN_TIPOS::INNER_JOIN, $params)
                    ->willReturn($join);

        $clausula->expects($this->once())
                    ->method('joinAdd')
                    ->with($join);

        $this->invocar($this->object, 'setConstruccionClausula', [$clausula]);

        $this->object->join(JOIN_TIPOS::INNER_JOIN,
            $params->tabla2,
            $params->atributo_tabla1,
            $params->operador,
            $params->atributo_tabla2);
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: where ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\ComandoDml::where
     *
     * @group where
     */
    public function testWhere()
    {
        $atributo = 'atributo';
        $operador = OP::EQUAL;
        $params = 3;

        $clausula = $this->getMockBuilder(WhereClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['getOperadores', 'operadorCrear'])
                            ->getMockForAbstractClass();

        $operadores_grupo = new GrupoOperadores();
        $and_operador = new AndOperador($clausula, $this->fabrica_condiciones);

        $this->clausula_fabrica->expects($this->once())
                                ->method('getWhere')
                                ->willReturn($clausula);

        $clausula->expects($this->once())
                    ->method('getOperadores')
                    ->willReturn($operadores_grupo);

        $clausula->expects($this->once())
                    ->method('operadorCrear')
                    ->willReturn($and_operador);

        $this->object->where($atributo, $operador, $params);

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertArrayInstancesOf(WhereClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: WhereClausula');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: WhereClausula');

        $grupo = $operadores_grupo->getGrupoActual();

        $this->assertCount(1, $grupo->getOperadores(),
            'ERROR: el numero de operadores no es el esperado');

        $this->assertArrayInstancesOf(Logico::class, $grupo->getOperadores(),
            'ERROR: el tipo de operadores no es el correcto');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: operador ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\ComandoDml::operador
     *
     * @group operador
     */
    public function testOperador()
    {
        $operador_logico = OPERADOR_TIPOS::AND_OP;
        $atributo = 'atributo';
        $operador = OP::EQUAL;
        $params = 3;

        $clausula = $this->getMockBuilder(WhereClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['getOperadores', 'operadorCrear'])
                            ->getMockForAbstractClass();

        $operadores_grupo = new GrupoOperadores();
        $and_operador = new AndOperador($clausula, $this->fabrica_condiciones);

        $clausula->expects($this->once())
                    ->method('getOperadores')
                    ->willReturn($operadores_grupo);

        $clausula->expects($this->once())
                    ->method('operadorCrear')
                    ->willReturn($and_operador);

        $this->invocar($this->object, 'setConstruccionClausula', [$clausula]);
        $this->object->operador($operador_logico, $atributo, $operador, $params);

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $grupo = $operadores_grupo->getGrupoActual();

        $this->assertCount(1, $grupo->getOperadores(),
            'ERROR: el numero de operadores no es el esperado');

        $this->assertArrayInstancesOf(Logico::class, $grupo->getOperadores(),
            'ERROR: el tipo de operadores no es el correcto');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: orderBy ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\ComandoDml::orderBy
     *
     * @group orderBy
     */
    public function testOrderBy()
    {
        $params = new OrderByParams();
        $params->atributos = ['atributo1', 'atributo2', 'atributo3'];

        $clausula = $this->getMockBuilder(OrderByClausula::class)
                        ->disableOriginalConstructor()
                        ->setMethods(['getOrder'])
                        ->getMockForAbstractClass();

        $this->clausula_fabrica->expects($this->once())
                                ->method('getOrder')
                                ->willReturn($clausula);

        $this->object->orderBy($params->atributos);

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertInstanceOf(OrderByParams::class, $clausula->getParams(),
            'ERROR: los parámetros no son los correctos');

        $this->assertEquals($params, $clausula->getParams(),
            'ERROR: los parámetros no son los esperados');

        $this->assertArrayInstancesOf(OrderByClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: SqlClausula');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: SqlClausula');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: limit ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\ComandoDml::limit
     *
     * @group limit
     */
    public function testLimit()
    {
        $params = new LimitParams();
        $params->number = 3;
        $params->offset = 2;

        $clausula = $this->getMockBuilder(LimitClausula::class)
                        ->disableOriginalConstructor()
                        ->setMethods(['getLimit'])
                        ->getMockForAbstractClass();

        $this->clausula_fabrica->expects($this->once())
                                ->method('getLimit')
                                ->willReturn($clausula);

        $this->object->limit($params->offset, $params->number);

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertInstanceOf(LimitParams::class, $clausula->getParams(),
            'ERROR: los parámetros no son los correctos');

        $this->assertEquals($params, $clausula->getParams(),
            'ERROR: los parámetros no son los esperados');

        $this->assertArrayInstancesOf(LimitClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: SqlClausula');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: SqlClausula');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: partition ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\ComandoDml::partition
     *
     * @group limit
     */
    public function testPartition()
    {
        $params = new PartitionParams();
        $params->particiones = ['particion1', 'particion2', 'particion3'];

        $clausula = $this->getMockBuilder(PartitionClausula::class)
                        ->disableOriginalConstructor()
                        ->setMethods(['getPartition'])
                        ->getMockForAbstractClass();

        $this->clausula_fabrica->expects($this->once())
                                ->method('getPartition')
                                ->willReturn($clausula);

        $this->object->partition($params->particiones);

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertInstanceOf(PartitionParams::class, $clausula->getParams(),
            'ERROR: los parámetros no son los correctos');

        $this->assertEquals($params, $clausula->getParams(),
            'ERROR: los parámetros no son los esperados');

        $this->assertArrayInstancesOf(PartitionClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: SqlClausula');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: SqlClausula');
    }
    // ******************************************************************************

    // </editor-fold>
}
