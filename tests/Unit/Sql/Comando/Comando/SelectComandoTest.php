<?php

declare(strict_types=1);

namespace Tests\Unit\Sql\Comando\Comando;

use GT\Libs\Sistema\BD\Conexion\Conexion;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\AndOperador;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Condicion\CondicionFabricaInterface;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\GrupoOperadores;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\OP;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\ClausulaFabricaInterface;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\FromClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\FromParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\GroupBy\GroupByClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\GroupBy\GroupByParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Having\HavingClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Limit\LimitClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\OrderBy\OrderByClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Select\SelectClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Select\SelectParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\TIPOS as CLAUSULA_TIPOS;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Where\WhereClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoGenerarClausulaPrincipalNoExisteException;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\TIPOS as COMANDO_TIPOS;
use PHPUnit\Framework\TestCase;
use Phpunit\Util;

// ******************************************************************************

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class SelectComandoTest extends TestCase
{
    use Util;
    // ******************************************************************************

    /**
     * @var SelectComando
     */
    protected $object;

    /**
     * @var ComandoDmlMock
     */
    private $helper;

    /**
     * @var ClausulaFabricaInterface
     */
    private $clausula_fabrica;

    /**
     * @var Conexion
     */
    private $conexion;

    /**
     * @var CondicionFabricaInterface
     */
    private $fabrica_condiciones;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoDmlMock();

        $this->conexion = $this->helper->getConexionMock();
        $this->clausula_fabrica = $this->helper->getClausulasFabrica();
        $this->fabrica_condiciones = $this->helper->getCondicionesFabricaMock();

        $this->object = new SelectComando($this->conexion, $this->clausula_fabrica, $this->fabrica_condiciones);
    }
    // ******************************************************************************

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    // ******************************************************************************

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: select ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\SelectComando::select
     *
     * @group select
     */
    public function testSelect()
    {
        $params = new SelectParams();
        $params->atributos = ['tabla_eliminar'];
        $params->modificadores = ['modificadores'];

        $clausula = $this->getMockBuilder(SelectClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['getSelect'])
                            ->getMockForAbstractClass();

        $this->clausula_fabrica->expects($this->once())
                                ->method('getSelect')
                                ->willReturn($clausula);

        $this->object->select($params->atributos, $params->modificadores);

        $this->assertEquals(COMANDO_TIPOS::SELECT, $this->object->getTipo(),
            'ERROR:el tipo de comando no es el esperado: SQL');

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertInstanceOf(SelectParams::class, $clausula->getParams(),
            'ERROR: los parámetros no son los correctos');

        $this->assertEquals($params, $clausula->getParams(),
            'ERROR: los parámetros no son los esperados');

        $this->assertArrayInstancesOf(SelectClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: SelectClausula');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: SelectClausula');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: from ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\SelectComando::from
     *
     * @group from
     */
    public function testFrom()
    {
        $params = new FromParams();
        $params->tablas = ['tabla1', 'tabla2', 'tabla3'];

        $clausula = $this->getMockBuilder(FromClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['getFrom'])
                            ->getMockForAbstractClass();

        $this->clausula_fabrica->expects($this->once())
                                ->method('getFrom')
                                ->willReturn($clausula);

        $this->object->from($params->tablas);

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertInstanceOf(FromParams::class, $clausula->getParams(),
            'ERROR: los parámetros no son los correctos');

        $this->assertEquals($params, $clausula->getParams(),
            'ERROR: los parámetros no son los esperados');

        $this->assertArrayInstancesOf(FromClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: FromClausula');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: FromClausula');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: having ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\SelectComando::having
     *
     * @group having
     */
    public function testHaving()
    {
        $atributo = 'atributo';
        $operador = OP::EQUAL;
        $params = 3;

        $clausula = $this->getMockBuilder(HavingClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['getOperadores', 'operadorCrear'])
                            ->getMockForAbstractClass();

        $operadores_grupo = new GrupoOperadores();
        $and_operador = new AndOperador($clausula, $this->fabrica_condiciones);

        $this->clausula_fabrica->expects($this->once())
                                ->method('getHaving')
                                ->willReturn($clausula);

        $clausula->expects($this->once())
                    ->method('getOperadores')
                    ->willReturn($operadores_grupo);

        $clausula->expects($this->once())
                    ->method('operadorCrear')
                    ->willReturn($and_operador);

        $this->object->having($atributo, $operador, $params);

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertArrayInstancesOf(HavingClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: WhereClausula');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: WhereClausula');

        $grupo = $operadores_grupo->getGrupoActual();

        $this->assertCount(1, $grupo->getOperadores(),
            'ERROR: el numero de operadores no es el esperado');

        $this->assertArrayInstancesOf(Logico::class, $grupo->getOperadores(),
            'ERROR: el tipo de operadores no es el correcto');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: groupBy ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\SelectComando::groupBy
     *
     * @group groupBy
     */
    public function testGroupBy()
    {
        $params = new GroupByParams();
        $params->atributos = ['atributo1', 'atributo2', 'atributo3'];

        $clausula = $this->getMockBuilder(GroupByClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['getGroupBy'])
                            ->getMockForAbstractClass();

        $this->clausula_fabrica->expects($this->once())
                                ->method('getGroupBy')
                                ->willReturn($clausula);

        $this->object->groupBy($params->atributos[0], $params->atributos[1], $params->atributos[2]);

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertInstanceOf(GroupByParams::class, $clausula->getParams(),
            'ERROR: los parámetros no son los correctos');

        $this->assertEquals($params, $clausula->getParams(),
            'ERROR: los parámetros no son los esperados');

        $this->assertArrayInstancesOf(GroupByClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: GroupByClausula');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: GroupByClausula');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: generar ">

    private function generarClausulasMock($clase, $tipo, $retorno)
    {
        $clausula = $this->getMockBuilder($clase)
                            ->disableOriginalConstructor()
                            ->setMethods(['generar'])
                            ->getMockForAbstractClass();
        $this->propertyEdit($clausula, 'tipo', $tipo);

        $clausula->expects($this->once())
                    ->method('generar')
                    ->willReturn($retorno);

        $this->invocar($this->object, 'clausulaAdd', [$clausula]);
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\SelectComando::generar
     *
     * @group generar
     */
    public function testGenerarTodasLasClausulas()
    {
        $this->generarClausulasMock(SelectClausula::class, CLAUSULA_TIPOS::SELECT, 'SELECT');
        $this->generarClausulasMock(FromClausula::class, CLAUSULA_TIPOS::FROM, 'FROM');
        $this->generarClausulasMock(WhereClausula::class, CLAUSULA_TIPOS::WHERE, 'WHERE');
        $this->generarClausulasMock(GroupByClausula::class, CLAUSULA_TIPOS::GROUPBY, 'GROUPBY');
        $this->generarClausulasMock(HavingClausula::class, CLAUSULA_TIPOS::HAVING, 'HAVING');
        $this->generarClausulasMock(OrderByClausula::class, CLAUSULA_TIPOS::ORDERBY, 'ORDERBY');
        $this->generarClausulasMock(LimitClausula::class, CLAUSULA_TIPOS::LIMIT, 'LIMIT');

        $resultado = $this->object->generar();

        $this->assertEquals('SELECT FROM WHERE GROUPBY HAVING ORDERBY LIMIT', $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\SelectComando::generar
     *
     * @group generar
     */
    public function testGenerarFaltaClausulaPrincipal()
    {
        $this->expectException(ComandoGenerarClausulaPrincipalNoExisteException::class);
        $this->object->generar();
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\SelectComando::generar
     *
     * @group generar
     */
    public function testGenerarNoEstanDefinidasTodasLasClausulas()
    {
        $this->generarClausulasMock(SelectClausula::class, CLAUSULA_TIPOS::SELECT, 'SELECT');
        $this->generarClausulasMock(FromClausula::class, CLAUSULA_TIPOS::FROM, 'FROM');
        $this->generarClausulasMock(WhereClausula::class, CLAUSULA_TIPOS::WHERE, 'WHERE');
        $this->generarClausulasMock(OrderByClausula::class, CLAUSULA_TIPOS::ORDERBY, 'ORDERBY');
        $this->generarClausulasMock(LimitClausula::class, CLAUSULA_TIPOS::LIMIT, 'LIMIT');

        $resultado = $this->object->generar();

        $this->assertEquals('SELECT FROM WHERE ORDERBY LIMIT', $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>
}
