<?php

declare(strict_types=1);

namespace Tests\Unit\Sql\Comando\Clausula;

use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\AndOperador;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\OrOperador;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\TIPOS as OPERADORES_TIPOS;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\XorOperador;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\ComandoMock;
use PHPUnit\Framework\TestCase;
use Phpunit\Util;

// ******************************************************************************

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class ClausulaTest extends TestCase
{
    use Util;
    // ******************************************************************************

    /**
     * @var Clausula
     */
    protected $object;

    /**
     * @var ClausulaMock
     */
    private $clausula_mock;

    /**
     * @var ClausulaFabricaInterface
     */
    private $clausula_fabrica;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->clausula_mock = new ComandoMock();

        $conexion = $this->clausula_mock->getConexionMock();
        $this->clausula_fabrica = $this->clausula_mock->getClausulasFabrica();
        $condiciones_fabrica = $this->clausula_mock->getCondicionesFabricaMock();
        $comando = $this->clausula_mock->getComandoMock($conexion, $this->clausula_fabrica, $condiciones_fabrica);

        $this->object = $this->getMockBuilder(Clausula::class)
                                ->setConstructorArgs([$comando, $condiciones_fabrica, false])
                                ->setMethods([])
                                ->getMockForAbstractClass();
    }
    // ******************************************************************************

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    // ******************************************************************************

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getTipo ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula::getTipo
     *
     * @group getTipo
     */
    public function testGetTipoObtieneElTipoDeClausula()
    {
        $expect = TIPOS::SELECT;
        $this->propertyEdit($this->object, 'tipo', $expect);

        $resultado = $this->object->getTipo();

        $this->assertEquals($expect, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getParams ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula::getParams
     *
     * @group getParams
     */
    public function testGetParamsObtieneLosParametros()
    {
        $expect = $this->getMockBuilder(Parametros::class)
                        ->getMockForAbstractClass();
        $this->propertyEdit($this->object, 'params', $expect);

        $resultado = $this->object->getParams();

        $this->assertEquals($expect, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: setParams ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula::setParams
     *
     * @group setParams
     */
    public function testSetParamsEstableceLosParametros()
    {
        $expect = $this->getMockBuilder(Parametros::class)
                        ->getMockForAbstractClass();
        $Clusula__params = $this->propertyEdit($this->object, 'params');

        $this->object->setParams($expect);

        $this->assertEquals($expect, $Clusula__params->getValue($this->object),
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getParams ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula::getOperadores
     *
     * @group getOperadores
     */
    public function testGetOperadoresObtieneLosParametros()
    {
        $resultado = $this->object->getOperadores();

        $this->assertNull($resultado,
            'ERROR: el valor devuelto no es NULL');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: operadorCrear ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula::operadorCrear
     *
     * @group operadorCrear
     */
    public function testOperadorCrearANDOP()
    {
        $resultado = $this->object->operadorCrear(OPERADORES_TIPOS::AND_OP);

        $this->assertInstanceOf(AndOperador::class, $resultado,
            'ERROR: el valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula::operadorCrear
     *
     * @group operadorCrear
     */
    public function testOperadorCrearOROP()
    {
        $resultado = $this->object->operadorCrear(OPERADORES_TIPOS::OR_OP);

        $this->assertInstanceOf(OrOperador::class, $resultado,
            'ERROR: el valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula::operadorCrear
     *
     * @group operadorCrear
     */
    public function testOperadorCrearXOROP()
    {
        $resultado = $this->object->operadorCrear(OPERADORES_TIPOS::XOR_OP);

        $this->assertInstanceOf(XorOperador::class, $resultado,
            'ERROR: el valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>
}
