<?php

declare(strict_types=1);

namespace Tests\Unit\Sql\Comando\Operador;

use GT\Libs\Sistema\BD\Conexion\Conexion;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Condicion\Condicion;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Condicion\CondicionFabricaInterface;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Clausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\ClausulaFabricaInterface;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use PHPUnit\Framework\TestCase;
use Phpunit\Util;

// ******************************************************************************

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class LogicoTest extends TestCase
{
    use Util;
    // ******************************************************************************

    /**
     * @var Logico
     */
    protected $object;

    /**
     * @var ComandoDmlMock
     */
    private $helper;

    /**
     * @var ClausulaFabricaInterface
     */
    private $clausula_fabrica;

    /**
     * @var Conexion
     */
    private $conexion;

    /**
     * @var Clausula
     */
    private $clausula;

    /**
     * @var CondicionFabricaInterface
     */
    private $fabrica_condiciones;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoDmlMock();

        $this->conexion = $this->helper->getConexionMock(['prepare']);
        $this->clausula_fabrica = $this->helper->getClausulasFabrica();
        $this->fabrica_condiciones = $this->helper->getCondicionesFabricaMock();
        $comando = $this->helper->getComandoMock($this->conexion, $this->clausula_fabrica, $this->fabrica_condiciones);
        $this->clausula = $this->helper->getClausulaMock($comando, $this->fabrica_condiciones, true);

        $this->object = $this->getMockBuilder(Logico::class)
                                ->setConstructorArgs([$this->clausula, $this->fabrica_condiciones])
                                ->getMockForAbstractClass();
    }
    // ******************************************************************************

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    // ******************************************************************************

    // <editor-fold defaultstate="collapsed" desc=" Tests para la funci贸n: getCondicion ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::getCondicion
     *
     * @group getCondicion
     */
    public function testGetCondicion()
    {
        $expects = $this->getMockBuilder(Condicion::class)
                        ->disableOriginalConstructor()
                        ->getMockForAbstractClass();

        $this->propertyEdit($this->object, 'condicion', $expects);

        $resultado = $this->object->getCondicion();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la funci贸n: setCondicion ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::setCondicion
     *
     * @group setCondicion
     */
    public function testSetCondicion()
    {
        $condicion = $this->getMockBuilder(Condicion::class)
                        ->disableOriginalConstructor()
                        ->getMockForAbstractClass();

        $this->object->setCondicion($condicion);

        $this->assertEquals($condicion, $this->object->getCondicion(),
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la funci贸n: getFabricaCondiciones ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::getFabricaCondiciones
     *
     * @group getFabricaCondiciones
     */
    public function testGetFabricaCondiciones()
    {
        $expects = $this->fabrica_condiciones;

        $resultado = $this->invocar($this->object, 'getFabricaCondiciones');

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la funci贸n: condicionCrear ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::condicionCrear
     *
     * @group condicionCrear
     */
    public function testCondicionCrearCondicionIN()
    {
        $atributo = 'atributo';
        $tipo = OP::IN;
        $valor = [1, 2, 3];

        $condicion = $this->getMockBuilder(Condicion::class)
                            ->disableOriginalConstructor()
                            ->getMockForAbstractClass();

        $this->fabrica_condiciones->expects($this->once())
                                    ->method('getIn')
                                    ->with($this->clausula, $atributo, $tipo, $valor)
                                    ->willReturn($condicion);

        $this->object->condicionCrear($atributo, $tipo, $valor);

        $resultado = $this->propertyEdit($this->object, 'condicion')->getValue($this->object);
        $this->assertEquals($condicion, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::condicionCrear
     *
     * @group condicionCrear
     */
    public function testCondicionCrearCondicionNOTIN()
    {
        $atributo = 'atributo';
        $tipo = OP::NOT_IN;
        $valor = [1, 2, 3];

        $condicion = $this->getMockBuilder(Condicion::class)
                            ->disableOriginalConstructor()
                            ->getMockForAbstractClass();

        $this->fabrica_condiciones->expects($this->once())
                                    ->method('getIn')
                                    ->with($this->clausula, $atributo, $tipo, $valor)
                                    ->willReturn($condicion);

        $this->object->condicionCrear($atributo, $tipo, $valor);

        $resultado = $this->propertyEdit($this->object, 'condicion')->getValue($this->object);
        $this->assertEquals($condicion, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::condicionCrear
     *
     * @group condicionCrear
     */
    public function testCondicionCrearCondicionISNULL()
    {
        $atributo = 'atributo';
        $tipo = OP::IS_NULL;

        $condicion = $this->getMockBuilder(Condicion::class)
                            ->disableOriginalConstructor()
                            ->getMockForAbstractClass();

        $this->fabrica_condiciones->expects($this->once())
                                    ->method('getIs')
                                    ->with($this->clausula, $atributo, $tipo)
                                    ->willReturn($condicion);

        $this->object->condicionCrear($atributo, $tipo);

        $resultado = $this->propertyEdit($this->object, 'condicion')->getValue($this->object);
        $this->assertEquals($condicion, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::condicionCrear
     *
     * @group condicionCrear
     */
    public function testCondicionCrearCondicionISNOTNULL()
    {
        $atributo = 'atributo';
        $tipo = OP::IS_NOT_NULL;

        $condicion = $this->getMockBuilder(Condicion::class)
                            ->disableOriginalConstructor()
                            ->getMockForAbstractClass();

        $this->fabrica_condiciones->expects($this->once())
                                    ->method('getIs')
                                    ->with($this->clausula, $atributo, $tipo)
                                    ->willReturn($condicion);

        $this->object->condicionCrear($atributo, $tipo);

        $resultado = $this->propertyEdit($this->object, 'condicion')->getValue($this->object);
        $this->assertEquals($condicion, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::condicionCrear
     *
     * @group condicionCrear
     */
    public function testCondicionCrearCondicionISTRUE()
    {
        $atributo = 'atributo';
        $tipo = OP::IS_TRUE;

        $condicion = $this->getMockBuilder(Condicion::class)
                            ->disableOriginalConstructor()
                            ->getMockForAbstractClass();

        $this->fabrica_condiciones->expects($this->once())
                                    ->method('getIs')
                                    ->with($this->clausula, $atributo, $tipo)
                                    ->willReturn($condicion);

        $this->object->condicionCrear($atributo, $tipo);

        $resultado = $this->propertyEdit($this->object, 'condicion')->getValue($this->object);
        $this->assertEquals($condicion, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::condicionCrear
     *
     * @group condicionCrear
     */
    public function testCondicionCrearCondicionISFALSE()
    {
        $atributo = 'atributo';
        $tipo = OP::IS_FALSE;

        $condicion = $this->getMockBuilder(Condicion::class)
                            ->disableOriginalConstructor()
                            ->getMockForAbstractClass();

        $this->fabrica_condiciones->expects($this->once())
                                    ->method('getIs')
                                    ->with($this->clausula, $atributo, $tipo)
                                    ->willReturn($condicion);

        $this->object->condicionCrear($atributo, $tipo);

        $resultado = $this->propertyEdit($this->object, 'condicion')->getValue($this->object);
        $this->assertEquals($condicion, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::condicionCrear
     *
     * @group condicionCrear
     */
    public function testCondicionCrearCondicionBETWEEN()
    {
        $atributo = 'atributo';
        $tipo = OP::BETWEEN;
        $ini = 3;
        $fin = 10;

        $condicion = $this->getMockBuilder(Condicion::class)
                            ->disableOriginalConstructor()
                            ->getMockForAbstractClass();

        $this->fabrica_condiciones->expects($this->once())
                                    ->method('getBetween')
                                    ->with($this->clausula, $atributo, $tipo, $ini, $fin)
                                    ->willReturn($condicion);

        $this->object->condicionCrear($atributo, $tipo, $ini, $fin);

        $resultado = $this->propertyEdit($this->object, 'condicion')->getValue($this->object);
        $this->assertEquals($condicion, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::condicionCrear
     *
     * @group condicionCrear
     */
    public function testCondicionCrearCondicionNOTBETWEEN()
    {
        $atributo = 'atributo';
        $tipo = OP::NOT_BETWEEN;
        $ini = 3;
        $fin = 10;

        $condicion = $this->getMockBuilder(Condicion::class)
                            ->disableOriginalConstructor()
                            ->getMockForAbstractClass();

        $this->fabrica_condiciones->expects($this->once())
                                    ->method('getBetween')
                                    ->with($this->clausula, $atributo, $tipo, $ini, $fin)
                                    ->willReturn($condicion);

        $this->object->condicionCrear($atributo, $tipo, $ini, $fin);

        $resultado = $this->propertyEdit($this->object, 'condicion')->getValue($this->object);
        $this->assertEquals($condicion, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Logico::condicionCrear
     *
     * @group condicionCrear
     */
    public function testCondicionCrearCondicionEQUAL()
    {
        $atributo = 'atributo';
        $tipo = OP::EQUAL;
        $valor = 3;

        $condicion = $this->getMockBuilder(Condicion::class)
                            ->disableOriginalConstructor()
                            ->getMockForAbstractClass();

        $this->fabrica_condiciones->expects($this->once())
                                    ->method('getComparacion')
                                    ->with($this->clausula, $atributo, $tipo, $valor)
                                    ->willReturn($condicion);

        $this->object->condicionCrear($atributo, $tipo, $valor);

        $resultado = $this->propertyEdit($this->object, 'condicion')->getValue($this->object);
        $this->assertEquals($condicion, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>
}
