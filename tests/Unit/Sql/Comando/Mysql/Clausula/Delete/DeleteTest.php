<?php

declare(strict_types=1);

namespace Tests\Unit\Sql\Comando\Mysql\Clausula\Delete;

use GT\Libs\Sistema\BD\Conexion\Conexion;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\Comando;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\ClausulaFabricaInterface;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Delete\DeleteParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\TIPOS;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\ComandoMock;
use PHPUnit\Framework\TestCase;
use Phpunit\Util;

// ******************************************************************************

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class DeleteTest extends TestCase
{
    use Util;
    // ******************************************************************************

    /**
     * @var Delete
     */
    private $object;

    /**
     * @var ComandoDmlMock
     */
    private $helper;

    /**
     * @var ClausulaFabricaInterface
     */
    private $clausula_fabrica;

    /**
     * @var Comando
     */
    private $comando;

    /**
     * @var Conexion
     */
    private $conexion;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoMock();

        $this->conexion = $this->helper->getConexionMock(['quote']);
        $this->clausula_fabrica = $this->helper->getClausulasFabrica();
        $fabrica_condiciones = $this->helper->getCondicionesFabricaMock();
        $this->comando = $this->helper->getComandoMock($this->conexion, $this->clausula_fabrica, $fabrica_condiciones, ['getConexion']);

        $this->object = new Delete($this->comando, $fabrica_condiciones, false);
    }
    // ******************************************************************************

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    // ******************************************************************************

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: tipo de claúsula ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Delete\Delete::generar
     *
     * @group generar
     */
    public function testGenerarTipoDeClausula()
    {
        $tipo = $this->propertyEdit($this->object, 'tipo')->getValue($this->object);
        $this->assertEquals(TIPOS::DELETE, $tipo,
            'ERROR: la clausual no es del tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: generar ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Delete\Delete::generar
     *
     * @group generar
     */
    public function testGenerarUnaTablaSinTablasDeReferencia()
    {
        $expects = 'DELETE '.MODIFICADORES::IGNORE.' '.MODIFICADORES::LOW_PRIORITY.
                    ' FROM tabla_eliminar1';

        $param = new DeleteParams();
        $param->tablas_eliminar = ['tabla_eliminar1'];
        $param->tablas_referencia = [];
        $param->modificadores = [MODIFICADORES::IGNORE, MODIFICADORES::LOW_PRIORITY];

        $this->object->setParams($param);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Delete\Delete::generar
     *
     * @group generar
     */
    public function testGenerarVariasTablasSinTablasDeReferencia()
    {
        $expects = 'DELETE '.MODIFICADORES::IGNORE.' '.MODIFICADORES::LOW_PRIORITY.
                    ' FROM tabla_eliminar1, tabla_eliminar2';

        $param = new DeleteParams();
        $param->tablas_eliminar = ['tabla_eliminar1', 'tabla_eliminar2'];
        $param->tablas_referencia = [];
        $param->modificadores = [MODIFICADORES::IGNORE, MODIFICADORES::LOW_PRIORITY];

        $this->object->setParams($param);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Delete\Delete::generar
     *
     * @group generar
     */
    public function testGenerarUnaTablaConUnaTablaDeReferencia()
    {
        $expects = 'DELETE '.MODIFICADORES::IGNORE.' '.MODIFICADORES::LOW_PRIORITY.
                    ' tabla_eliminar1'.
                    ' FROM tabla_referencia1';

        $param = new DeleteParams();
        $param->tablas_eliminar = ['tabla_eliminar1'];
        $param->tablas_referencia = ['tabla_referencia1'];
        $param->modificadores = [MODIFICADORES::IGNORE, MODIFICADORES::LOW_PRIORITY];

        $this->object->setParams($param);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Delete\Delete::generar
     *
     * @group generar
     */
    public function testGenerarUnaTablaConTablasDeReferencia()
    {
        $expects = 'DELETE '.MODIFICADORES::IGNORE.' '.MODIFICADORES::LOW_PRIORITY.
                    ' tabla_eliminar1'.
                    ' FROM tabla_referencia1, tabla_referencia2';

        $param = new DeleteParams();
        $param->tablas_eliminar = ['tabla_eliminar1'];
        $param->tablas_referencia = ['tabla_referencia1', 'tabla_referencia2'];
        $param->modificadores = [MODIFICADORES::IGNORE, MODIFICADORES::LOW_PRIORITY];

        $this->object->setParams($param);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Delete\Delete::generar
     *
     * @group generar
     */
    public function testGenerarVariasTablasConTablasDeReferencia()
    {
        $expects = 'DELETE '.MODIFICADORES::IGNORE.' '.MODIFICADORES::LOW_PRIORITY.
                    ' tabla_eliminar1, tabla_eliminar2'.
                    ' FROM tabla_referencia1, tabla_referencia2';

        $param = new DeleteParams();
        $param->tablas_eliminar = ['tabla_eliminar1', 'tabla_eliminar2'];
        $param->tablas_referencia = ['tabla_referencia1', 'tabla_referencia2'];
        $param->modificadores = [MODIFICADORES::IGNORE, MODIFICADORES::LOW_PRIORITY];

        $this->object->setParams($param);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getRetornoCampos ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Delete\Delete::getRetornoCampos
     *
     * @group getRetornoCampos
     */
    public function testGetRetornoCampos()
    {
        $resultado = $this->object->getRetornoCampos();

        $this->assertIsArray($resultado,
            'ERROR: el valor devulto no es un array');

        $this->assertEmpty($resultado,
            'ERROR: Se esperaba que el valor devuelto fuera un array vacío');
    }
    // ******************************************************************************

    // </editor-fold>
}
