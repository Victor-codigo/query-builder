<?php

declare(strict_types=1);

namespace Tests\Unit\Sql\Comando\Mysql\Clausula\From;

use GT\Libs\Sistema\BD\Conexion\Conexion;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\Comando;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\ClausulaFabricaInterface;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\FromParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\JoinParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\TIPOS;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\ComandoMock;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\LeftJoin;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\RightJoin;
use PHPUnit\Framework\TestCase;
use Phpunit\Util;

// ******************************************************************************

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class FromTest extends TestCase
{
    use Util;
    // ******************************************************************************

    /**
     * @var From
     */
    private $object;

    /**
     * @var ComandoDmlMock
     */
    private $helper;

    /**
     * @var ClausulaFabricaInterface
     */
    private $clausula_fabrica;

    /**
     * @var Comando
     */
    private $comando;

    /**
     * @var Conexion
     */
    private $conexion;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoMock();

        $this->conexion = $this->helper->getConexionMock(['quote']);
        $this->clausula_fabrica = $this->helper->getClausulasFabrica();
        $fabrica_condiciones = $this->helper->getCondicionesFabricaMock();
        $this->comando = $this->helper->getComandoMock($this->conexion, $this->clausula_fabrica, $fabrica_condiciones, ['getConexion']);

        $this->object = new From($this->comando, $fabrica_condiciones, false);
    }
    // ******************************************************************************

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    // ******************************************************************************

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: tipo de clausula ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\From::generar
     *
     * @group generar
     */
    public function testGenerarTipoDeClausula()
    {
        $tipo = $this->propertyEdit($this->object, 'tipo')->getValue($this->object);

        $this->assertEquals(TIPOS::FROM, $tipo,
            'ERROR: la clausual no es del tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: generar ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\From::generar
     *
     * @group generar
     */
    public function testGenerarSinJoinsUnaTabla()
    {
        $expects = 'FROM tabla1';

        $param = new FromParams();
        $param->tablas = ['tabla1'];

        $this->object->setParams($param);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\From::generar
     *
     * @group generar
     */
    public function testGenerarSinJoinsVariasTablas()
    {
        $expects = 'FROM tabla1, tabla2, tabla3';

        $param = new FromParams();
        $param->tablas = ['tabla1', 'tabla2', 'tabla3'];

        $this->object->setParams($param);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\From::generar
     *
     * @group generar
     */
    public function testGenerarConUnJoinUnaTabla()
    {
        $expects = 'FROM tabla1'.
                    ' LEFT JOIN tabla2 ON tabla1.atributo = tabla2.atributo';

        $param = new FromParams();
        $param->tablas = ['tabla1'];

        $this->object->setParams($param);

        $join_params = new JoinParams();
        $join_params->tabla2 = 'tabla2';
        $join_params->atributo_tabla1 = 'tabla1.atributo';
        $join_params->atributo_tabla2 = 'tabla2.atributo';

        $join = new LeftJoin($this->object, $join_params);
        $this->object->joinAdd($join);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\From::generar
     *
     * @group generar
     */
    public function testGenerarConUnVariosJoinUnaTabla()
    {
        $expects = 'FROM tabla1'.
                    ' LEFT JOIN tabla2 ON tabla1.atributo = tabla2.atributo'.
                    ' RIGHT JOIN tabla3 ON tabla2.atributo = tabla3.atributo';

        $param = new FromParams();
        $param->tablas = ['tabla1'];

        $this->object->setParams($param);

        $left_join_params = new JoinParams();
        $left_join_params->tabla2 = 'tabla2';
        $left_join_params->atributo_tabla1 = 'tabla1.atributo';
        $left_join_params->atributo_tabla2 = 'tabla2.atributo';

        $left_join = new LeftJoin($this->object, $left_join_params);
        $this->object->joinAdd($left_join);

        $right_join_params = new JoinParams();
        $right_join_params->tabla2 = 'tabla3';
        $right_join_params->atributo_tabla1 = 'tabla2.atributo';
        $right_join_params->atributo_tabla2 = 'tabla3.atributo';

        $right_join = new RightJoin($this->object, $right_join_params);
        $this->object->joinAdd($right_join);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\From::generar
     *
     * @group generar
     */
    public function testGenerarConUnVariosJoinVariasTablas()
    {
        $expects = 'FROM tabla1, tabla4'.
                    ' LEFT JOIN tabla2 ON tabla1.atributo = tabla2.atributo'.
                    ' RIGHT JOIN tabla3 ON tabla2.atributo = tabla3.atributo';

        $param = new FromParams();
        $param->tablas = ['tabla1', 'tabla4'];

        $this->object->setParams($param);

        $left_join_params = new JoinParams();
        $left_join_params->tabla2 = 'tabla2';
        $left_join_params->atributo_tabla1 = 'tabla1.atributo';
        $left_join_params->atributo_tabla2 = 'tabla2.atributo';

        $left_join = new LeftJoin($this->object, $left_join_params);
        $this->object->joinAdd($left_join);

        $right_join_params = new JoinParams();
        $right_join_params->tabla2 = 'tabla3';
        $right_join_params->atributo_tabla1 = 'tabla2.atributo';
        $right_join_params->atributo_tabla2 = 'tabla3.atributo';

        $right_join = new RightJoin($this->object, $right_join_params);
        $this->object->joinAdd($right_join);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>
}
