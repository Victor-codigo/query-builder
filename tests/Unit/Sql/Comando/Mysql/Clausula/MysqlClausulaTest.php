<?php

declare(strict_types=1);

namespace Tests\Unit\Sql\Comando\Mysql\Clausula;

use GT\Libs\Sistema\BD\Conexion\Conexion;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\Comando;
use GT\Libs\Sistema\BD\QueryConstructor\Comando\Operador\Condicion\CondicionFabricaInterface;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Clausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\ClausulaFabricaInterface;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\JoinParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\ComandoMock;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Delete\Delete;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\From;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\CrosstJoin;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\FullOutertJoin;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\InnerJoin;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\LeftJoin;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\RightJoin;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\GroupBy\GroupBy;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Having\Having;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Insert\Insert;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\InsertAttr\InsertAttr;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Limit\Limit;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\OnDuplicate\OnDuplicate;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\OrderBy\OrderBy;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Param\ParamMysql;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Partition\Partition;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Select\Select;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Set\Set;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Sql\Sql;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Update\Update;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Values\Values;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Where\Where;
use PHPUnit\Framework\TestCase;
use Phpunit\Util;

// ******************************************************************************

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class MysqlClausulaTest extends TestCase
{
    use Util;
    // ******************************************************************************

    /**
     * @var MysqlClausula
     */
    protected $object;

    /**
     * @var ComandoDmlMock
     */
    private $helper;

    /**
     * @var ClausulaFabricaInterface
     */
    private $clausula_fabrica;

    /**
     * @var Clausula
     */
    private $clausula;

    /**
     * @var Comando
     */
    private $comando;

    /**
     * @var Conexion
     */
    private $conexion;

    /**
     * @var CondicionFabricaInterface
     */
    private $fabrica_condiciones;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoMock();

        $this->conexion = $this->helper->getConexionMock(['quote']);
        $this->clausula_fabrica = $this->helper->getClausulasFabrica();
        $this->fabrica_condiciones = $this->helper->getCondicionesFabricaMock();
        $this->comando = $this->helper->getComandoMock($this->conexion, $this->clausula_fabrica, $this->fabrica_condiciones, ['getConexion']);

        $this->object = new MysqlClausula();
    }
    // ******************************************************************************

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->destructorTest($this->object);
    }
    // ******************************************************************************

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getSql ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getSql
     *
     * @group getSql
     */
    public function testGetSql()
    {
        $resultado = $this->object->getSql($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(Sql::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getParam ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getParam
     *
     * @group getParam
     */
    public function testGetParam()
    {
        $resultado = $this->object->getParam();

        $this->assertInstanceOf(ParamMysql::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getSelect ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getSelect
     *
     * @group getSelect
     */
    public function testGetSelect()
    {
        $resultado = $this->object->getSelect($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(Select::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getUpdate ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getUpdate
     *
     * @group getUpdate
     */
    public function testGetUpdate()
    {
        $resultado = $this->object->getUpdate($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(Update::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getDelete ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getDelete
     *
     * @group getDelete
     */
    public function testGetDelete()
    {
        $resultado = $this->object->getDelete($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(Delete::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getInsert ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getInsert
     *
     * @group getInsert
     */
    public function testGetInsert()
    {
        $resultado = $this->object->getInsert($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(Insert::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getFrom ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getFrom
     *
     * @group getFrom
     */
    public function testGetFrom()
    {
        $resultado = $this->object->getFrom($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(From::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getSet ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getSet
     *
     * @group getSet
     */
    public function testGetSet()
    {
        $resultado = $this->object->getSet($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(Set::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getInnerJoin ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getInnerJoin
     *
     * @group getInnerJoin
     */
    public function testGetInnerJoin()
    {
        $from = new From($this->comando, $this->fabrica_condiciones, false);
        $params = new JoinParams();

        $resultado = $this->object->getInnerJoin($from, $params);

        $this->assertInstanceOf(InnerJoin::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getLeftJoin ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getLeftJoin
     *
     * @group getLeftJoin
     */
    public function testGetLeftJoin()
    {
        $from = new From($this->comando, $this->fabrica_condiciones, false);
        $params = new JoinParams();

        $resultado = $this->object->getLeftJoin($from, $params);

        $this->assertInstanceOf(LeftJoin::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getRightJoin ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getRightJoin
     *
     * @group getRightJoin
     */
    public function testGetRightJoin()
    {
        $from = new From($this->comando, $this->fabrica_condiciones, false);
        $params = new JoinParams();

        $resultado = $this->object->getRightJoin($from, $params);

        $this->assertInstanceOf(RightJoin::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getCrossJoin ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getCrossJoin
     *
     * @group getCrossJoin
     */
    public function testGetCrossJoin()
    {
        $from = new From($this->comando, $this->fabrica_condiciones, false);
        $params = new JoinParams();

        $resultado = $this->object->getCrossJoin($from, $params);

        $this->assertInstanceOf(CrosstJoin::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getFullOuterJoin ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getFullOuterJoin
     *
     * @group getFullOuterJoin
     */
    public function testGetFullOuterJoin()
    {
        $from = new From($this->comando, $this->fabrica_condiciones, false);
        $params = new JoinParams();

        $resultado = $this->object->getFullOuterJoin($from, $params);

        $this->assertInstanceOf(FullOutertJoin::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getWhere ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getWhere
     *
     * @group getWhere
     */
    public function testGetWhere()
    {
        $resultado = $this->object->getWhere($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(Where::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getGroupBy ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getGroupBy
     *
     * @group getGroupBy
     */
    public function testGetGroupBy()
    {
        $resultado = $this->object->getGroupBy($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(GroupBy::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getHaving ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getHaving
     *
     * @group getHaving
     */
    public function testGetHaving()
    {
        $resultado = $this->object->getHaving($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(Having::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getOrder ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getOrder
     *
     * @group getOrder
     */
    public function testGetOrder()
    {
        $resultado = $this->object->getOrder($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(OrderBy::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getLimit ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getLimit
     *
     * @group getLimit
     */
    public function testGetLimit()
    {
        $resultado = $this->object->getLimit($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(Limit::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getInsertAttr ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getInsertAttr
     *
     * @group getInsertAttr
     */
    public function testGetInsertAttr()
    {
        $resultado = $this->object->getInsertAttr($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(InsertAttr::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getValues ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getValues
     *
     * @group getValues
     */
    public function testGetValues()
    {
        $resultado = $this->object->getValues($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(Values::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getOnDuplicate ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getOnDuplicate
     *
     * @group getOnDuplicate
     */
    public function testGetOnDuplicate()
    {
        $resultado = $this->object->getOnDuplicate($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(OnDuplicate::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getPartition ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\MysqlClausula::getPartition
     *
     * @group getPartition
     */
    public function testGetPartition()
    {
        $resultado = $this->object->getPartition($this->comando, $this->fabrica_condiciones, false);

        $this->assertInstanceOf(Partition::class, $resultado,
            'ERROR: El valor devuelto no es delt tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>
}
