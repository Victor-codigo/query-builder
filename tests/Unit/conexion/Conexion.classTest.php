<?php

namespace GT\Libs\Sistema\BD\Conexion;

use PDO;
use PDOException;
use PDOStatement;
use PHPUnit_Framework_TestCase;
use Phpunit_Util;
//******************************************************************************


function trigger_error($error_msg, $error_type)
{
    call_user_func(ConexionTest::$trigger_error, $error_msg, $error_type);
}
//******************************************************************************


/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class ConexionTest extends PHPUnit_Framework_TestCase
{
    use Phpunit_Util;
//******************************************************************************

    /**
     * @var Conexion
     */
    protected $object;

    /**
     * @var ConexionConfig
     */
    private $conexion_config = null;


    /**
     * @var Function
     */
    public static $trigger_error = null;



    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->conexion_config = new ConexionConfig();
        $conexion_info = $this->conexion_config->getConexionInfo();

        $this->object = $this
            ->getMockBuilder(Conexion::class)
            ->setConstructorArgs(array($conexion_info))
            ->setMethods(['crearPdo'])
            ->getMockForAbstractClass();
    }
//******************************************************************************


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->destructorTest($this->object);
    }
//******************************************************************************



// <editor-fold defaultstate="collapsed" desc=" Tests para la función: getConexion ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::getConexion
     * @group getConexion
     */
    public function testGetConexion()
    {
        $this->propertyEdit($this->object, 'conexion', 'conexion');

        $resultado = $this->object->getConexion();

        $this->assertEquals('conexion', $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: setConexionInfo ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::setConexionInfo
     * @group setConexionInfo
     */
    public function testSetConexionInfo()
    {
        $conexion__info = $this->propertyEdit($this->object, 'conexion_info')->getValue($this->object);
        $info = $this->conexion_config->getConexionInfo();

        $this->object->setConexionInfo($info);

        $this->assertEquals($info, $conexion__info,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: getConexionInfo ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::getConexionInfo
     * @group getConexionInfo
     */
    public function testGetConexionInfo()
    {
        $info = $this->conexion_config->getConexionInfo();
        $this->propertyEdit($this->object, 'conexion_info', $info);

        $resultado = $this->object->getConexionInfo();

        $this->assertEquals($info, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: getDriver ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::getDriver
     * @group getDriver
     */
    public function testGetDriver()
    {
        $this->propertyEdit($this->object, 'driver', 'driver');

        $resultado = $this->object->getdriver();

        $this->assertEquals('driver', $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: getConectado ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::getConectado
     * @group getConectado
     */
    public function testGetConectado()
    {
        $resultado = $this->object->getConectado();

        $this->assertFalse($resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: conectar ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::conectar
     * @group conectar
     */
    public function testConectar__Servidor_ConexionParamsException()
    {
        $this->expectException(ConexionParamsException::class);

        $conexion_info = $this->conexion_config->getConexionInfo();
        $conexion_info->servidor = null;

        $this->propertyEdit($this->object,
                                        'conexion_info',
                                        $conexion_info);


        $this->object->conectar();
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::conectar
     * @group conectar
     */
    public function testConectar__Nombre_ConexionParamsException()
    {
        $this->expectException(ConexionParamsException::class);

        $conexion_info = $this->conexion_config->getConexionInfo();
        $conexion_info->nombre = null;

        $this->propertyEdit($this->object,
                                        'conexion_info',
                                        $conexion_info);


        $this->object->conectar();
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::conectar
     * @group conectar
     */
    public function testConectar__Usuario_ConexionParamsException()
    {
        $this->expectException(ConexionParamsException::class);

        $conexion_info = $this->conexion_config->getConexionInfo();
        $conexion_info->usuario = null;

        $this->propertyEdit($this->object,
                                        'conexion_info',
                                        $conexion_info);


        $this->object->conectar();
    }
//******************************************************************************

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::conectar
     * @group conectar
     */
    public function testConectar__password_ConexionParamsException()
    {
        $this->expectException(ConexionParamsException::class);

        $conexion_info = $this->conexion_config->getConexionInfo();
        $conexion_info->password = null;

        $this->propertyEdit($this->object,
                                        'conexion_info',
                                        $conexion_info);


        $this->object->conectar();
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::conectar
     * @group conectar
     */
    public function testConectar__ConexionException()
    {
        $this->object
            ->expects($this->once())
            ->method('crearPdo')
            ->will($this->throwException(new ConexionException()));

        $this->expectException(ConexionException::class);
        $this->object->conectar();
    }
//******************************************************************************

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::conectar
     * @group conectar
     */
    public function testConectar__ok()
    {
        $coexion_atributo = 'conexion';
        $conexion__conexion = $this->propertyEdit($this->object, 'conexion', $coexion_atributo)
                                    ->getValue($this->object);

        $pdo_mock = $this->conexion_config->getPDO(array('__construct', 'setAtributos'));

        $this->object
            ->expects($this->once())
            ->method('crearPdo')
            ->will($this->returnValue('conexion'));

        $pdo_mock
            ->expects($this->once())
            ->method('setAtributos');

        $resultado = $this->object->conectar();

        $this->assertTrue($resultado,
            'ERROR: el valor devuelto no es TRUE');

        $this->assertEquals($coexion_atributo, $conexion__conexion,
            'ERROR: el valor del atributo conexion no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: cerrar ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::cerrar
     * @group cerrar
     */
    public function testCerrar()
    {
        $this->propertyEdit($this->object, 'conexion', 'conexion')
                ->getValue($this->object);

        $resultado = $this->object->cerrar();

        $this->assertNull($resultado,
            'ERROR: el valor devuelto no es NULL');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: beginTransaction ">


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::beginTransaction
     * @group beginTransaction
     */
    public function testBeginTransaction__Ok()
    {
        $pdo_mock = $this->conexion_config->getPDO(array('beginTransaction'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('beginTransaction')
                    ->will($this->returnValue(true));

        $resultado = $this->object->beginTransaction();

        $this->assertTrue($resultado,
            'ERROR: el valor devuelto no es TRUE');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::beginTransaction
     * @group beginTransaction
     */
    public function testBeginTransaction__ConexionBeginTransactionException()
    {
        $this->expectException(ConexionBeginTransactionException::class);
        $pdo_mock = $this->conexion_config->getPDO(array('beginTransaction'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('beginTransaction')
                    ->will($this->returnCallback(function()
                    {
                        throw new PDOException();
                    }));

        $this->object->beginTransaction();

    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: commit ">


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::commit
     * @group commit
     */
    public function testCommit__Ok()
    {
        $pdo_mock = $this->conexion_config->getPDO(array('commit'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('commit')
                    ->will($this->returnValue(true));

        $resultado = $this->object->commit();

        $this->assertTrue($resultado,
            'ERROR: El valor devuelto no es TRUE');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::commit
     * @group commit
     */
    public function testBeginTransaction__ConexionCommitException()
    {
        $this->expectException(ConexionCommitException::class);
        $pdo_mock = $this->conexion_config->getPDO(array('commit'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('commit')
                    ->will($this->returnCallback(function()
                    {
                        throw new PDOException();
                    }));

        $this->object->commit();

    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: rollBack ">


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::rollBack
     * @group rollBack
     */
    public function testRollBack__Ok()
    {
        $pdo_mock = $this->conexion_config->getPDO(array('rollBack'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('rollBack')
                    ->will($this->returnValue(true));

        $resultao = $this->object->rollBack();

        $this->assertTrue($resultao,
            'ERROR: el valor devuelto no es TRUE');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::rollBack
     * @group rollBack
     */
    public function testRollBack__ConexionRollBackException()
    {
        $this->expectException(ConexionRollBackException::class);
        $pdo_mock = $this->conexion_config->getPDO(array('rollBack'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('rollBack')
                    ->will($this->returnCallback(function()
                    {
                        throw new PDOException();
                    }));

        $this->object->rollBack();

    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: query ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::query
     * @group query
     */
    public function testQuery__ConexionQueryException()
    {
        $sql = '';
        $this->expectException(ConexionQueryException::class);
        $pdo_mock = $this->conexion_config->getPDO(array('query'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('query')
                    ->will($this->returnCallback(function()
                    {
                        throw new PDOException();
                    }));

        static::$trigger_error = function($error_msg, $error_type)
        {
            $this->assertInternalType('string', $error_msg,
                'ERROR: el valor $error_msg no es del tipo esperado');

            $this->assertequals(E_USER_ERROR, $error_type,
                'ERROR: el tipo de error pasado no es el esperado');
        };

        $this->object->query($sql);
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::query
     * @group query
     */
    public function testQuery__Ok()
    {
        $sql = '';
        $expect = new PDOStatement();
        $pdo_mock = $this->conexion_config->getPDO(array('query'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('query')
                    ->will($this->returnCallback(function() use ($expect)
                    {
                        return $expect;
                    }));

        $resultado = $this->object->query($sql);

        $this->assertEquals($expect, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: exec ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::exec
     * @group exec
     */
    public function testExec__ConexionExecException()
    {
        $sql = '';
        $this->expectException(ConexionExecException::class);
        $pdo_mock = $this->conexion_config->getPDO(array('exec'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('exec')
                    ->will($this->returnCallback(function()
                    {
                        throw new PDOException();
                    }));


        static::$trigger_error = function($error_msg, $error_type)
        {
            $this->assertInternalType('string', $error_msg,
                'ERROR: el valor $error_msg no es del tipo esperado');

            $this->assertequals(E_USER_ERROR, $error_type,
                'ERROR: el tipo de error pasado no es el esperado');
        };

        $this->object->exec($sql);
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::exec
     * @group exec
     */
    public function testExec__Ok()
    {
        $sql = '';
        $expect = 1;
        $pdo_mock = $this->conexion_config->getPDO(array('exec'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('exec')
                    ->will($this->returnCallback(function() use ($expect)
                    {
                        return $expect;
                    }));

        $resultado = $this->object->exec($sql);

        $this->assertEquals($expect, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: prepare ">


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::prepare
     * @group prepare
     */
    public function testPrepare__Ok()
    {
        $sql = 'sql';
        $driver_opciones = array();
        $expect = new PDOStatement();
        $pdo_mock = $this->conexion_config->getPDO(array('prepare'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('prepare')
                    ->with($sql, $driver_opciones)
                    ->will($this->returnValue($expect));

        $resultado = $this->object->prepare($sql, $driver_opciones);

        $this->assertEquals($expect, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: quote ">


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Conexion::quote
     * @group quote
     */
    public function testQuote__Ok()
    {
        $valor = 'valor';
        $parameter_tipo = PDO::PARAM_STR;
        $expect = new PDOStatement();
        $pdo_mock = $this->conexion_config->getPDO(array('quote'));

        $this->propertyEdit($this->object, 'conexion', $pdo_mock);

        $pdo_mock->expects($this->once())
                    ->method('quote')
                    ->with($valor, $parameter_tipo)
                    ->will($this->returnValue($expect));

        $resultado = $this->object->quote($valor, $parameter_tipo);

        $this->assertEquals($expect, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>
}

