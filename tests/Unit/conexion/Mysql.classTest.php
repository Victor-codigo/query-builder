<?php

namespace GT\Libs\Sistema\BD\Conexion;

use PHPUnit_Framework_TestCase;
use Phpunit_Util;
//******************************************************************************




/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class MysqlTest extends PHPUnit_Framework_TestCase
{
    use Phpunit_Util;
//******************************************************************************

    /**
     * @var Mysql
     */
    protected $object;

    /**
     * @var ConexionConfig
     */
    private $conexion_config = null;

    /**
     * @var Conexion
     */
    private $conexion = null;





    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->conexion_config = new ConexionConfig();
        $conexion_info = $this->conexion_config->getConexionInfo();

        $this->object = new Mysql($conexion_info);

        $this->conexion = $this->getMockBuilder(Conexion::class)
                                ->setConstructorArgs(array($conexion_info))
                                ->setMethods(['lastInsertId'])
                                ->getMockForAbstractClass();
    }
//******************************************************************************





    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->destructorTest($this->object);
    }
//******************************************************************************



// <editor-fold defaultstate="collapsed" desc=" Tests para la función: getConexionString ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Mysql::getConexionString
     * @group getConexionString
     */
    public function testGetConexionString_Todos_los_parametros()
    {
        $info = $this->conexion_config->getConexionInfo();

        $expects = 'mysql:' .
                    'host=' . $info->servidor . ';' .
                    'port=' . $info->puerto . ';' .
                    'dbname=' . $info->nombre . ';' .
                    'charset=' . $info->charset .  ';';

        $resultado = $this->invocar($this->object, 'getConexionString');

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Mysql::getConexionString
     * @group getConexionString
     */
    public function testGetConexionString_sin_parametro_puerto()
    {
        $info = $this->conexion_config->getConexionInfo();
        $info->puerto = null;

        $this->propertyEdit($this->object, 'conexion_info', $info);

        $expects = 'mysql:' .
                    'host=' . $info->servidor . ';' .
                    'dbname=' . $info->nombre . ';' .
                    'charset=' . $info->charset .  ';';

        $resultado = $this->invocar($this->object, 'getConexionString');

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: setAtributos ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Mysql::setAtributos
     * @group setAtributos
     */
    public function testSetAtributos()
    {

    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: lastInsertId ">

    /**
     * @covers GT\Libs\Sistema\BD\Conexion\Mysql::lastInsertId
     * @group lastInsertId
     */
    public function testLastInsertId()
    {
        $expects = 'lastId';
        $atributo = 'atributo';

        $this->propertyEdit($this->object, 'conexion', $this->conexion);

        $this->conexion
            ->expects($this->once())
            ->method('lastInsertId')
            ->with($atributo)
            ->will($this->returnValue($expects));

        $resultado = $this->object->lastInsertId($atributo);

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>
}