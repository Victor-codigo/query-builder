<?php

namespace GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From;

use GT\Libs\Sistema\BD\Conexion\ConexionConfig;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\ClausulaMock;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\JOIN_TIPOS;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\IClausulaFabrica;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\ComandoMock;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\CrosstJoin;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\FullOutertJoin;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\InnerJoin;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\LeftJoin;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\From\Join\RightJoin;
use PHPUnit_Framework_TestCase;
use Phpunit_Util;
//******************************************************************************




/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class FromClausulaTest extends PHPUnit_Framework_TestCase
{
    use Phpunit_Util;
//******************************************************************************

    /**
     * @var FromClausula
     */
    protected $object;

    /**
     * @var ConexionConfig
     */
    private $conexion_config = null;

    /**
     *
     * @var ClausulaMock
     */
    private $clausula_mock = null;

    /**
     * @var IClausulaFabrica
     */
    private $clausula_fabrica = null;




    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->clausula_mock = new ComandoMock();

        $conexion = $this->clausula_mock->getConexionMock();
        $this->clausula_fabrica = $this->clausula_mock->getClausulasFabrica();
        $fabrica_condiciones = $this->clausula_mock->getCondicionesFabricaMock();
        $comando = $this->clausula_mock->getComandoMock($conexion, $this->clausula_fabrica, $fabrica_condiciones);

        $this->object = $this->getMockBuilder(FromClausula::class)
                                ->setConstructorArgs(array($comando, $fabrica_condiciones, false))
                                ->getMockForAbstractClass();
    }
//******************************************************************************


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        //$this->destructorTest($this->object);
    }
//******************************************************************************



// <editor-fold defaultstate="collapsed" desc=" Tests para la función: getJoins ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\FromClausula::getJoins
     * @group getJoins
     */
    public function testGetJoins__Obtiene_el_array_de_joins()
    {
        $expect = array('join1', 'join 2');
        $this->propertyEdit($this->object, 'joins', $expect);

        $resultado = $this->object->getJoins();

        $this->assertEquals($expect, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: joinAdd ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\FromClausula::joinAdd
     * @group joinAdd
     */
    public function testJoinAdd__anyade_un_join()
    {
        $expect = array(new InnerJoin($this->object, new JoinParams()));
        $FromClusula__join = $this->propertyEdit($this->object, 'joins', array());

        $this->object->joinAdd($expect[0]);

        $this->assertEquals($FromClusula__join->getValue($this->object), $expect,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: joinCrear ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\FromClausula::joinCrear
     * @group joinCrear
     */
    public function testJoinCrear__INNER_JOIN()
    {
        $join_params = new JoinParams();
        $join = new InnerJoin($this->object, $join_params);
        $this->clausula_fabrica->expects($this->once())
                                ->method('getInnerJoin')
                                ->with($this->object, $join_params)
                                ->will($this->returnValue($join));

        $resultado = $this->object->joinCrear($this->clausula_fabrica,
                                                JOIN_TIPOS::INNER_JOIN,
                                                $join_params);

        $this->assertInstanceOf(InnerJoin::class, $resultado,
            'ERROR: el objeto devuleto no es el esperado');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\FromClausula::joinCrear
     * @group joinCrear
     */
    public function testJoinCrear__LEFT_JOIN()
    {
        $join_params = new JoinParams();
        $join = new LeftJoin($this->object, $join_params);
        $this->clausula_fabrica->expects($this->once())
                                ->method('getLeftJoin')
                                ->with($this->object, $join_params)
                                ->will($this->returnValue($join));

        $resultado = $this->object->joinCrear($this->clausula_fabrica,
                                                JOIN_TIPOS::LEFT_JOIN,
                                                $join_params);

        $this->assertInstanceOf(LeftJoin::class, $resultado,
            'ERROR: el objeto devuleto no es el esperado');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\FromClausula::joinCrear
     * @group joinCrear
     */
    public function testJoinCrear__RIGHT_JOIN()
    {
        $join_params = new JoinParams();
        $join = new RightJoin($this->object, $join_params);
        $this->clausula_fabrica->expects($this->once())
                                ->method('getRightJoin')
                                ->with($this->object, $join_params)
                                ->will($this->returnValue($join));

        $resultado = $this->object->joinCrear($this->clausula_fabrica,
                                                JOIN_TIPOS::RIGHT_JOIN,
                                                $join_params);

        $this->assertInstanceOf(RightJoin::class, $resultado,
            'ERROR: el objeto devuleto no es el esperado');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\FromClausula::joinCrear
     * @group joinCrear
     */
    public function testJoinCrear__FULL_OUTER_JOIN()
    {
        $join_params = new JoinParams();
        $join = new FullOutertJoin($this->object, $join_params);
        $this->clausula_fabrica->expects($this->once())
                                ->method('getFullOuterJoin')
                                ->with($this->object, $join_params)
                                ->will($this->returnValue($join));

        $resultado = $this->object->joinCrear($this->clausula_fabrica,
                                                JOIN_TIPOS::FULL_OUTER_JOIN,
                                                $join_params);

        $this->assertInstanceOf(FullOutertJoin::class, $resultado,
            'ERROR: el objeto devuleto no es el esperado');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\From\FromClausula::joinCrear
     * @group joinCrear
     */
    public function testJoinCrear__CROSS_JOIN()
    {
        $join_params = new JoinParams();
        $join = new CrosstJoin($this->object, $join_params);
        $this->clausula_fabrica->expects($this->once())
                                ->method('getCrossJoin')
                                ->with($this->object, $join_params)
                                ->will($this->returnValue($join));

        $resultado = $this->object->joinCrear($this->clausula_fabrica,
                                                JOIN_TIPOS::CROSS_JOIN,
                                                $join_params);

        $this->assertInstanceOf(CrosstJoin::class, $resultado,
            'ERROR: el objeto devuleto no es el esperado');
    }
//******************************************************************************

// </editor-fold>
}