<?php

namespace GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Sql;

use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use PDO;
use PHPUnit_Framework_TestCase;
use Phpunit_Util;
use stdClass;
//******************************************************************************




/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class SqlCadenaTest extends PHPUnit_Framework_TestCase
{
    use Phpunit_Util;
//******************************************************************************

    /**
     * @var SqlCadena
     */
    protected $object;

    /**
     *
     * @var ComandoDmlMock
     */
    private $comando_mock = null;

    /**
     * @var ComandoDmlMock
     */
    private $helper = null;





    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoDmlMock();

        $conexion = $this->helper->getConexionMock();
        $clausula_mock = $this->helper->getClausulasFabrica();
        $fabrica_condiciones = $this->helper->getCondicionesFabricaMock();
        $this->comando_mock = $this->helper->getComandoDmlMock($conexion, $clausula_mock, $fabrica_condiciones,
                                        ['fetchAllBoth', 'fetchAllAssoc', 'fetchAllClass',
                                            'fetchAllObject', 'fetchAllColumn', 'fetchFirst',
                                            'fetchLast', 'fetchFind', 'params']);

        $this->object = new SqlCadena($this->comando_mock);
    }
//******************************************************************************


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }
//******************************************************************************


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchAllBoth ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Sql\SqlCadena::fetchAllBoth
     * @group fetchAllBoth
     */
    public function testFetchAllBoth()
    {
        $expects = 'retorno';

        $this->comando_mock->expects($this->once())
                        ->method('fetchAllBoth')
                        ->will($this->returnValue($expects));

        $resultado = $this->object->fetchAllBoth();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: params ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Sql\SqlCadena::params
     * @group params
     */
    public function testParams()
    {
        $expects = 'retorno';

        $this->comando_mock->expects($this->once())
                        ->method('params')
                        ->will($this->returnValue($expects));

        $resultado = $this->object->params([]);

        $this->assertInstanceOf(SqlCadena::class, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchAllAssoc ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Sql\SqlCadena::fetchAllAssoc
     * @group fetchAllAssoc
     */
    public function testFetchAllAssoc()
    {
        $expects = 'retorno';

        $this->comando_mock->expects($this->once())
                        ->method('fetchAllAssoc')
                        ->will($this->returnValue($expects));

        $resultado = $this->object->fetchAllAssoc();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchAllClass ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Sql\SqlCadena::fetchAllClass
     * @group fetchAllClass
     */
    public function testFetchAllClass()
    {
        $expects = 'retorno';
        $clase_nombre = 'nombre';
        $constructor_arg = array();

        $this->comando_mock->expects($this->once())
                        ->method('fetchAllClass')
                        ->with(PDO::FETCH_CLASS, $clase_nombre, $constructor_arg)
                        ->will($this->returnValue($expects));

        $resultado = $this->object->fetchAllClass($clase_nombre, $constructor_arg);

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchAllObject ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Sql\SqlCadena::fetchAllObject
     * @group fetchAllObject
     */
    public function testFetchAllObject()
    {
        $expects = 'retorno';
        $clase_nombre = 'nombre';
        $constructor_arg = array();

        $this->comando_mock->expects($this->once())
                        ->method('fetchAllObject')
                        ->with(PDO::FETCH_CLASS, stdClass::class)
                        ->will($this->returnValue($expects));

        $resultado = $this->object->fetchAllObject($clase_nombre, $constructor_arg);

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchAllColumn ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Sql\SqlCadena::fetchAllColumn
     * @group fetchAllColumn
     */
    public function testFetchAllColumn()
    {
        $expects = 'retorno';
        $column = 'nombre';

        $this->comando_mock->expects($this->once())
                        ->method('fetchAllColumn')
                        ->with($column)
                        ->will($this->returnValue($expects));

        $resultado = $this->object->fetchAllColumn($column);

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchFirst ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Sql\SqlCadena::fetchFirst
     * @group fetchFirst
     */
    public function testFetchFirst()
    {
        $expects = 'retorno';
        $field = 'nombre';
        $value = 'valor';
        $modo = PDO::FETCH_OBJ;

        $this->comando_mock->expects($this->once())
                        ->method('fetchFirst')
                        ->with($field, $value, $modo)
                        ->will($this->returnValue($expects));

        $resultado = $this->object->fetchFirst($field, $value, $modo);

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchLast ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Sql\SqlCadena::fetchLast
     * @group fetchLast
     */
    public function testFetchLast()
    {
        $expects = 'retorno';
        $field = 'nombre';
        $value = 'valor';
        $modo = PDO::FETCH_OBJ;

        $this->comando_mock->expects($this->once())
                        ->method('fetchLast')
                        ->with($field, $value, $modo)
                        ->will($this->returnValue($expects));

        $resultado = $this->object->fetchLast($field, $value, $modo);

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: fetchFind ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Sql\SqlCadena::fetchFind
     * @group fetchFind
     */
    public function testFetchFind()
    {
        $expects = 'retorno';
        $field = 'nombre';
        $value = 'valor';
        $modo = PDO::FETCH_OBJ;

        $this->comando_mock->expects($this->once())
                        ->method('fetchFind')
                        ->with($field, $value, $modo)
                        ->will($this->returnValue($expects));

        $resultado = $this->object->fetchFind($field, $value, $modo);

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>
}