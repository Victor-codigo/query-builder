<?php

namespace GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando;

use GT\Libs\Sistema\BD\Conexion\Conexion;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Delete\DeleteClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\IClausulaFabrica;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Insert\InsertAttrClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Insert\InsertAttrParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Insert\InsertClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Insert\InsertParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Limit\LimitClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\OnDuplicate\OnDuplicateClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\OnDuplicate\OnDuplicateParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\OrderBy\OrderByClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Partition\PartitionClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\TIPOS as CLAUSULA_TIPOS;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Values\ValuesClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Values\ValuesParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Where\WhereClausula;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoGenerarClausulaPrincipalNoExisteException;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\TIPOS as COMANDO_TIPOS;
use PHPUnit_Framework_TestCase;
use Phpunit_Util;
//******************************************************************************




/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class InsertComandoTest extends PHPUnit_Framework_TestCase
{
    use Phpunit_Util;
//******************************************************************************

    /**
     * @var InsertComando
     */
    protected $object;

    /**
     * @var ComandoDmlMock
     */
    private $helper = null;

    /**
     * @var IClausulaFabrica
     */
    private $clausula_fabrica = null;

    /**
     * @var Conexion
     */
    private $conexion = null;





    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoDmlMock();

        $this->conexion = $this->helper->getConexionMock();
        $this->clausula_fabrica = $this->helper->getClausulasFabrica();
        $fabrica_condiciones = $this->helper->getCondicionesFabricaMock();

        $this->object = new InsertComando($this->conexion, $this->clausula_fabrica, $fabrica_condiciones);
    }
//******************************************************************************


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }
//******************************************************************************



// <editor-fold defaultstate="collapsed" desc=" Tests para la función: insert ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\InsertComando::insert
     * @group insert
     */
    public function testInsert()
    {
        $params = new InsertParams();
        $params->tabla = 'tabla';
        $params->modificadores = ['modificadores'];

        $clausula = $this->getMockBuilder(InsertClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['getInsert'])
                            ->getMockForAbstractClass();

        $this->clausula_fabrica->expects($this->once())
                                ->method('getInsert')
                                ->will($this->returnValue($clausula));

        $this->object->insert($params->tabla, $params->modificadores);

        $this->assertEquals(COMANDO_TIPOS::INSERT, $this->object->getTipo(),
            'ERROR:el tipo de comando no es el esperado: SQL');

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertInstanceOf(InsertParams::class, $clausula->getParams(),
            'ERROR: los parámetros no son los correctos');

        $this->assertEquals($params, $clausula->getParams(),
            'ERROR: los parámetros no son los esperados');

        $this->assertArrayInstancesOf(InsertClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: InsertParams');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: InsertParams');
    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: attributes ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\InsertComando::attributes
     * @group attributes
     */
    public function testAttributes()
    {
        $params = new InsertAttrParams();
        $params->atributos = ['atributo1', 'atributo2', 'atributo3'];

        $clausula = $this->getMockBuilder(InsertAttrClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['getInsertAttr'])
                            ->getMockForAbstractClass();

        $this->clausula_fabrica->expects($this->once())
                                ->method('getInsertAttr')
                                ->will($this->returnValue($clausula));

        $this->object->attributes($params->atributos);


        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertInstanceOf(InsertAttrParams::class, $clausula->getParams(),
            'ERROR: los parámetros no son los correctos');

        $this->assertEquals($params, $clausula->getParams(),
            'ERROR: los parámetros no son los esperados');

        $this->assertArrayInstancesOf(InsertAttrClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: InsertParams');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: InsertParams');
    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: values ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\InsertComando::values
     * @group values
     */
    public function testValues_Un_solo_insert()
    {
        $params = new ValuesParams();
        $params->valores = ['valor1', 'valor2', 'valor3'];

        $clausula = $this->getMockBuilder(ValuesClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['getValues'])
                            ->getMockForAbstractClass();

        $this->clausula_fabrica->expects($this->once())
                                ->method('getValues')
                                ->will($this->returnValue($clausula));

        $this->object->values($params->valores);

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertInstanceOf(ValuesParams::class, $clausula->getParams(),
            'ERROR: los parámetros no son los correctos');

        $params->valores = array($params->valores);
        $this->assertEquals($params, $clausula->getParams(),
            'ERROR: los parámetros no son los esperados');

        $this->assertArrayInstancesOf(ValuesClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: ValuesClausula');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: ValuesParams');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\InsertComando::values
     * @group values
     */
    public function testValues_varios_inserts()
    {
        $params = new ValuesParams();
        $params->valores = [

            ['valor1', 'valor2', 'valor3'],
            ['valor1', 'valor2', 'valor3'],
            ['valor1', 'valor2', 'valor3']
        ];

        $clausula = $this->getMockBuilder(ValuesClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['getValues'])
                            ->getMockForAbstractClass();

        $this->clausula_fabrica->expects($this->once())
                                ->method('getValues')
                                ->will($this->returnValue($clausula));

        $this->object->values($params->valores);

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertInstanceOf(ValuesParams::class, $clausula->getParams(),
            'ERROR: los parámetros no son los correctos');

        $this->assertEquals($params, $clausula->getParams(),
            'ERROR: los parámetros no son los esperados');

        $this->assertArrayInstancesOf(ValuesClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: ValuesClausula');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: ValuesParams');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: onDuplicate ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\InsertComando::onDuplicate
     * @group onDuplicate
     */
    public function testOnDuplicate()
    {
        $params = new OnDuplicateParams();
        $params->valores = ['valor1', 'valor2', 'valor3'];

        $clausula = $this->getMockBuilder(OnDuplicateClausula::class)
                            ->disableOriginalConstructor()
                            ->setMethods(['getOnDuplicate'])
                            ->getMockForAbstractClass();

        $this->clausula_fabrica->expects($this->once())
                                ->method('getOnDuplicate')
                                ->will($this->returnValue($clausula));

        $this->object->onDuplicate($params->valores);

        $this->assertEquals($clausula, $this->object->getConstruccionClausula(),
            'ERROR: la clausula en construcción no es la esperada');

        $this->assertInstanceOf(OnDuplicateParams::class, $clausula->getParams(),
            'ERROR: los parámetros no son los correctos');

        $this->assertEquals($params, $clausula->getParams(),
            'ERROR: los parámetros no son los esperados');

        $this->assertArrayInstancesOf(OnDuplicateClausula::class, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: OnDuplicateClausula');

        $this->assertCount(1, $this->invocar($this->object, 'getClausulas'),
            'ERROR: las clausulas no son del tipo esperado: OnDuplicateClausula');
    }
//******************************************************************************

// </editor-fold>

// <editor-fold defaultstate="collapsed" desc=" Tests para la función: generar ">

    private function generarClausulasMock($clase, $tipo, $retorno)
    {
        $clausula = $this->getMockBuilder($clase)
                            ->disableOriginalConstructor()
                            ->setMethods(['generar'])
                            ->getMockForAbstractClass();
        $this->propertyEdit($clausula, 'tipo', $tipo);

        $clausula->expects($this->once())
                    ->method('generar')
                    ->will($this->returnValue($retorno));

        $this->invocar($this->object, 'clausulaAdd', [$clausula]);
    }
//******************************************************************************

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\InsertComando::generar
     * @group generar
     */
    public function testGenerar__Todas_las_clausulas()
    {
        $this->generarClausulasMock(DeleteClausula::class, CLAUSULA_TIPOS::INSERT, 'INSERT');
        $this->generarClausulasMock(PartitionClausula::class, CLAUSULA_TIPOS::PARTITION, 'PARTITION');
        $this->generarClausulasMock(WhereClausula::class, CLAUSULA_TIPOS::INSERT_ATTR, 'INSERT_ATTR');
        $this->generarClausulasMock(OrderByClausula::class, CLAUSULA_TIPOS::VALUES, 'VALUES');
        $this->generarClausulasMock(LimitClausula::class, CLAUSULA_TIPOS::ON_DUPLICATE_KEY_UPDATE, 'ON_DUPLICATE_KEY_UPDATE');

        $resultado = $this->object->generar();

        $this->assertEquals('INSERT PARTITION INSERT_ATTR VALUES ON_DUPLICATE_KEY_UPDATE', $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\InsertComando::generar
     * @group generar
     */
    public function testGenerar__Falta_clausula_principal()
    {
        $this->expectException(ComandoGenerarClausulaPrincipalNoExisteException::class);
        $this->object->generar();
    }
//******************************************************************************

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\InsertComando::generar
     * @group generar
     */
    public function testGenerar__No_estan_definidas_todas_las_clausulas()
    {
        $this->generarClausulasMock(DeleteClausula::class, CLAUSULA_TIPOS::INSERT, 'INSERT');
        $this->generarClausulasMock(PartitionClausula::class, CLAUSULA_TIPOS::ON_DUPLICATE_KEY_UPDATE, 'ON_DUPLICATE_KEY_UPDATE');

        $resultado = $this->object->generar();

        $this->assertEquals('INSERT ON_DUPLICATE_KEY_UPDATE', $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>
}