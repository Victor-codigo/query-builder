<?php

namespace GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Values;

use GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\Comando;
use GT\Libs\Sistema\BD\Conexion\Conexion;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\IClausulaFabrica;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\TIPOS;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Values\ValuesParams;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\ComandoMock;
use PHPUnit_Framework_TestCase;
use Phpunit_Util;
//******************************************************************************




/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class ValuesTest extends PHPUnit_Framework_TestCase
{
    use Phpunit_Util;
//******************************************************************************

    /**
     * @var Values
     */
    private $object = null;

    /**
     * @var ComandoDmlMock
     */
    private $helper = null;

    /**
     * @var IClausulaFabrica
     */
    private $clausula_fabrica = null;


    /**
     * @var Comando
     */
    private $comando = null;

    /**
     * @var Conexion
     */
    private $conexion = null;





    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoMock();

        $this->conexion = $this->helper->getConexionMock(['quote']);
        $this->clausula_fabrica = $this->helper->getClausulasFabrica();
        $fabrica_condiciones = $this->helper->getCondicionesFabricaMock();
        $this->comando = $this->helper->getComandoMock($this->conexion, $this->clausula_fabrica, $fabrica_condiciones, ['getConexion']);

        $this->object = new Values($this->comando, $fabrica_condiciones, false);
    }
//******************************************************************************


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }
//******************************************************************************


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: tipo de claúsula ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Values\Values::generar
     * @group generar
     */
    public function testGenerar__Tipo_de_clausula()
    {
        $tipo = $this->propertyEdit($this->object, 'tipo')->getValue($this->object);
        $this->assertEquals(TIPOS::VALUES, $tipo,
            'ERROR: la clausula no es del tipo esperado');
    }
//******************************************************************************

// </editor-fold>


// <editor-fold defaultstate="collapsed" desc=" Tests para la función: generar ">


    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Values\Values::generar
     * @group generar
     */
    public function testGenerar_Una_lista_de_valores()
    {
        $expects = 'VALUES (valor11, valor12, valor13)' ;

        $this->comando
                ->expects($this->any())
                ->method('getConexion')
                ->will($this->returnValue($this->conexion));

        $this->conexion
            ->expects($this->any())
            ->method('quote')
            ->will($this->returnArgument(0));

        $param = new ValuesParams();
        $param->valores = [['valor11', 'valor12', 'valor13']];

        $this->object->setParams($param);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\Values\Values::generar
     * @group generar
     */
    public function testGenerar_Varias_listas_de_valores()
    {
        $expects = 'VALUES (valor11, valor12, valor13), (valor21, valor22, valor23), (valor31, valor32, valor33)' ;

        $this->comando
                ->expects($this->any())
                ->method('getConexion')
                ->will($this->returnValue($this->conexion));

        $this->conexion
            ->expects($this->any())
            ->method('quote')
            ->will($this->returnArgument(0));

        $param = new ValuesParams();
        $param->valores = [

            ['valor11', 'valor12', 'valor13'],
            ['valor21', 'valor22', 'valor23'],
            ['valor31', 'valor32', 'valor33']
        ];

        $this->object->setParams($param);

        $resultado = $this->object->generar();

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

// </editor-fold>
}