<?php

namespace GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas;

use GT\Libs\Sistema\BD\QueryConstructor\Comando\Comando\Comando;
use GT\Libs\Sistema\BD\Conexion\Conexion;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\IClausulaFabrica;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Clausula\Param;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\ComandoDmlMock;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\ComandoMock;
use PHPUnit_Framework_TestCase;
use Phpunit_Util;
//******************************************************************************




/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class PlaceHolderTest extends PHPUnit_Framework_TestCase
{
    use Phpunit_Util, PlaceHolders;
//******************************************************************************


    /**
     * @var ComandoDmlMock
     */
    private $helper = null;

    /**
     * @var IClausulaFabrica
     */
    private $clausula_fabrica = null;


    /**
     * @var Comando
     */
    private $comando = null;

    /**
     * @var Conexion
     */
    private $conexion = null;





    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->helper = new ComandoMock();

        $this->conexion = $this->helper->getConexionMock(['quote']);
        $this->clausula_fabrica = $this->helper->getClausulasFabrica();
        $fabrica_condiciones = $this->helper->getCondicionesFabricaMock();
        $this->comando = $this->helper->getComandoMock($this->conexion, $this->clausula_fabrica, $fabrica_condiciones, ['getConexion']);
    }
//******************************************************************************


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }
//******************************************************************************



// <editor-fold defaultstate="collapsed" desc=" Tests para la funciÃ³n: parse ">

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\PlaceHolder::parse
     * @group parse
     */
    public function testParse__Parametro()
    {
        $param = new Param();
        $param->id = 'id';

        $resultado = $this->parse($param);

        $this->assertEquals(':' . $param->id, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\PlaceHolder::parse
     * @group parse
     */
    public function testParse__Valor_NULL()
    {
        $resultado = $this->parse(null);

        $this->assertEquals('NULL', $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\PlaceHolder::parse
     * @group parse
     */
    public function testParse__Valor_TRUE()
    {
        $resultado = $this->parse(true);

        $this->assertEquals(1, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\PlaceHolder::parse
     * @group parse
     */
    public function testParse__Valor_FALSE()
    {
        $resultado = $this->parse(false);

        $this->assertEquals(0, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\PlaceHolder::parse
     * @group parse
     */
    public function testParse__Valor_string()
    {
        $expects = '\'string\'';

        $this->comando
                ->expects($this->once())
                ->method('getConexion')
                ->will($this->returnValue($this->conexion));

        $this->conexion
                ->expects($this->once())
                ->method('quote')
                ->with()
                ->will($this->returnValue($expects));

        $resultado = $this->parse('string');

        $this->assertEquals($expects, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************


    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\PlaceHolder::parse
     * @group parse
     */
    public function testParse__Valor_numero()
    {
        $resultado = $this->parse(3);

        $this->assertEquals(3, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\PlaceHolder::parse
     * @group parse
     */
    public function testParse__Valor_numero_string()
    {
        $resultado = $this->parse('3');

        $this->assertEquals(3, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
//******************************************************************************

    /**
     * @covers GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Mysql\Clausulas\PlaceHolder::parse
     * @group parse
     */
    public function testParse__Valor_LOB()
    {
        //no se puede testear
    }
//******************************************************************************

// </editor-fold>
}