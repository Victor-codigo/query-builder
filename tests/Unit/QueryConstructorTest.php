<?php

declare(strict_types=1);

namespace Tests\Unit;

use GT\Libs\Sistema\BD\Conexion\Conexion;
use GT\Libs\Sistema\BD\Conexion\DRIVERS;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Delete\DeleteConstructor;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Insert\InsertConstructor;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Select\SelectConstructor;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Sql\SqlConstructor;
use GT\Libs\Sistema\BD\QueryConstructor\Sql\Comando\Comando\Constructor\Update\UpdateConstructor;
use PHPUnit\Framework\TestCase;
use Phpunit\Util;

// ******************************************************************************

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-26 at 14:51:55.
 */
class QueryConstructorTest extends TestCase
{
    use Util;
    // ******************************************************************************

    /**
     * @var BD
     */
    protected $object;

    /**
     * @var Conexion
     */
    private $conexion;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->conexion = $this->getMockBuilder(Conexion::class)
                                ->disableOriginalConstructor()
                                ->getMock();

        $this->conexion
            ->expects($this->once())
            ->method('getdriver')
            ->willReturn(DRIVERS::MYSQL);

        $this->object = new QueryConstructor($this->conexion);
    }
    // ******************************************************************************

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->destructorTest($this->object);
    }
    // ******************************************************************************

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: getconexion ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::getconexion
     *
     * @group getconexion
     */
    public function testGetConexion()
    {
        $resultado = $this->object->getconexion();

        $this->assertEquals($this->conexion, $resultado,
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: setconexion ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::setconexion
     *
     * @group setconexion
     */
    public function testSetConexion()
    {
        $this->object->setconexion($this->conexion);

        $this->assertEquals($this->conexion, $this->object->getconexion(),
            'ERROR: el valor devuelto no es el esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: selectConstructor ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::selectConstructor
     *
     * @group selectConstructor
     */
    public function testSelectConstructorSinConexionEstablecidaConLaBaseDeDatos()
    {
        $this->conexion
            ->expects($this->once())
            ->method('getConectado')
            ->willReturn(false);

        $this->conexion
            ->expects($this->once())
            ->method('conectar');

        $resultado = $this->object->selectConstructor();

        $this->assertInstanceOf(SelectConstructor::class, $resultado,
            'ERROR: El valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::selectConstructor
     *
     * @group selectConstructor
     */
    public function testSelectConstructorConConexionEstablecidaConLaBaseDeDatos()
    {
        $this->conexion
            ->expects($this->once())
            ->method('getConectado')
            ->willReturn(true);

        $this->conexion
            ->expects($this->never())
            ->method('conectar');

        $resultado = $this->object->selectConstructor();

        $this->assertInstanceOf(SelectConstructor::class, $resultado,
            'ERROR: El valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: updateConstructor ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::updateConstructor
     *
     * @group updateConstructor
     */
    public function testUpdateConstructorSinConexionEstablecidaConLaBaseDeDatos()
    {
        $this->conexion
            ->expects($this->once())
            ->method('getConectado')
            ->willReturn(false);

        $this->conexion
            ->expects($this->once())
            ->method('conectar');

        $resultado = $this->object->updateConstructor();

        $this->assertInstanceOf(UpdateConstructor::class, $resultado,
            'ERROR: El valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::updateConstructor
     *
     * @group updateConstructor
     */
    public function testUpdateConstructorConConexionEstablecidaConLaBaseDeDatos()
    {
        $this->conexion
            ->expects($this->once())
            ->method('getConectado')
            ->willReturn(true);

        $this->conexion
            ->expects($this->never())
            ->method('conectar');

        $resultado = $this->object->updateConstructor();

        $this->assertInstanceOf(UpdateConstructor::class, $resultado,
            'ERROR: El valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: deleteConstructor ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::deleteConstructor
     *
     * @group deleteConstructor
     */
    public function testDeleteConstructorSinConexionEstablecidaConLaBaseDeDatos()
    {
        $this->conexion
            ->expects($this->once())
            ->method('getConectado')
            ->willReturn(false);

        $this->conexion
            ->expects($this->once())
            ->method('conectar');

        $resultado = $this->object->deleteConstructor();

        $this->assertInstanceOf(DeleteConstructor::class, $resultado,
            'ERROR: El valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::deleteConstructor
     *
     * @group deleteConstructor
     */
    public function testDeleteConstructorConConexionEstablecidaConLaBaseDeDatos()
    {
        $this->conexion
            ->expects($this->once())
            ->method('getConectado')
            ->willReturn(true);

        $this->conexion
            ->expects($this->never())
            ->method('conectar');

        $resultado = $this->object->deleteConstructor();

        $this->assertInstanceOf(DeleteConstructor::class, $resultado,
            'ERROR: El valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: insertConstructor ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::insertConstructor
     *
     * @group insertConstructor
     */
    public function testInsertConstructorSinConexionEstablecidaConLaBaseDeDatos()
    {
        $this->conexion
            ->expects($this->once())
            ->method('getConectado')
            ->willReturn(false);

        $this->conexion
            ->expects($this->once())
            ->method('conectar');

        $resultado = $this->object->insertConstructor();

        $this->assertInstanceOf(InsertConstructor::class, $resultado,
            'ERROR: El valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::insertConstructor
     *
     * @group insertConstructor
     */
    public function testInsertConstructorConConexionEstablecidaConLaBaseDeDatos()
    {
        $this->conexion
            ->expects($this->once())
            ->method('getConectado')
            ->willReturn(true);

        $this->conexion
            ->expects($this->never())
            ->method('conectar');

        $resultado = $this->object->insertConstructor();

        $this->assertInstanceOf(InsertConstructor::class, $resultado,
            'ERROR: El valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc=" Tests para la función: sqlConstructor ">

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::sqlConstructor
     *
     * @group sqlConstructor
     */
    public function testSqlConstructorSinConexionEstablecidaConLaBaseDeDatos()
    {
        $this->conexion
            ->expects($this->once())
            ->method('getConectado')
            ->willReturn(false);

        $this->conexion
            ->expects($this->once())
            ->method('conectar');

        $resultado = $this->object->sqlConstructor();

        $this->assertInstanceOf(SqlConstructor::class, $resultado,
            'ERROR: El valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    /**
     * @covers \GT\Libs\Sistema\BD\QueryConstructor\QueryConstructor::sqlConstructor
     *
     * @group sqlConstructor
     */
    public function testSqlConstructorConConexionEstablecidaConLaBaseDeDatos()
    {
        $this->conexion
            ->expects($this->once())
            ->method('getConectado')
            ->willReturn(true);

        $this->conexion
            ->expects($this->never())
            ->method('conectar');

        $resultado = $this->object->sqlConstructor();

        $this->assertInstanceOf(SqlConstructor::class, $resultado,
            'ERROR: El valor devuelto no es del tipo esperado');
    }
    // ******************************************************************************

    // </editor-fold>
}
